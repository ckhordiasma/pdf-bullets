{"version":3,"sources":["components/tools.js","components/bullets.js","static/abbrs.xlsx","components/abbrtable.js","components/abbrs.js","components/thesaurus.js","components/main.js","serviceWorker.js","index.js"],"names":["pdfjs","require","pdfjsWorker","GlobalWorkerOptions","workerSrc","ImportTools","props","importFile","e","fileInputRef","current","value","callback","file","console","log","state","type","getDataFromPDF","getDataFromJSON","files","inputClick","importType","setState","click","filedata","pdfSetup","arrayBuffer","then","buffer","uint8Array","Uint8Array","getDocument","data","promise","getXFA","pdf","getFormName","getMetadata","result","info","Custom","getAllData","Promise","all","pullBullets","results","formName","datasetXML","replace","xmlDoc","DOMParser","parseFromString","bulletText","Forms","tagName","querySelector","innerHTML","getPageInfo","templateXML","fonts","fontSizes","widths","i","bulletTag","getAttribute","getBulletsFromPdf","textUpdater","onTextUpdate","widthUpdater","onWidthUpdate","bulletsHTML","pageData","parseFloat","width","bullets","documentElement","textContent","reader","FileReader","onload","JSON","parse","target","onJSONImport","readAsText","hoverOut","hovering","toggleMenu","React","createRef","menuState","this","className","onChange","style","display","ref","onClick","aria-haspopup","aria-controls","icon","faAngleDown","id","role","onMouseLeave","href","PureComponent","OutputTools","widthAWD","widthEPR","widthOPR","min","max","step","onWidthChange","enableOptim","onOptimChange","InputTools","onTextNorm","SaveTools","onSave","settings","storedData","stringify","localStorage","setItem","length","err","name","alert","onExport","dataURI","encodeURIComponent","exportRef","download","Logo","ThesaurusTools","onHide","DocumentTools","aria-label","onThesaurusHide","getSelectionInfo","editorState","selectionState","getSelection","anchorKey","getAnchorKey","contentBlock","getCurrentContent","getBlockForKey","start","getStartOffset","end","getEndOffset","selectedText","getText","slice","BULLET","sentence","split","BulletComparator","setEditorState","bulletOutputID","useState","Map","heightMap","setHeightMap","useEffect","newHeightMap","getBlockMap","keys","key","blockDiv","document","set","getBoundingClientRect","height","maxWidth","newEditorState","onSelect","handleKeyCommand","command","newState","RichUtils","onMouseUp","event","selection","window","toString","onKeyDown","ctrlKey","keyCode","preventDefault","match","RegExp","range","createRange","selectNode","removeAllRanges","addRange","tabIndex","Array","from","text","abbrReplacer","Bullet","widthPx","DPI","get","canvasRef","useRef","outputText","setOutputText","color","setColor","loading","setLoading","optimStatus","setOptimStatus","rendering","setBulletRendering","getContext","canvas","context","font","textAlign","renderBulletText","optimResults","evalFcn","smallerSpace","largerSpace","optWords","initResults","overflow","prevResults","finalResults","newSpace","finalOptimStatus","hashCode","str","hash","charCodeAt","getRandomInt","seed","Math","floor","abs","iReplace","join","splice","newResults","status","optimize","txt","visibility","position","top","left","minHeight","flexDirection","onHighlight","map","line","whiteSpace","error","getWidth","measureText","fullWidth","trimEnd","lines","textSplit","answerIdx","recursedText","warn","recursedResult","avgCharWidth","guessIndex","parseInt","firstGuessWidth","substring","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","setValue","useAsyncDebounce","undefined","placeholder","fontSize","border","DefaultColumnFilter","column","filterValue","setFilter","BooleanFilter","options","useMemo","values","currentSelection","indexOf","SelectCheckbox","row","updateDataAfterInput","getToggleRowSelectedProps","onSelChange","rowSelectProps","indeterminate","useCallback","index","checked","mergedStyle","update","size","faCheckSquare","faSquare","EditableCellTemplate","initialValue","onBlur","Row","rowOps","cells","cell","getCellProps","render","appendRow","faCopy","deleteRow","faTrash","AbbrTable","setData","columns","Header","accessor","Cell","Filter","filter","disableSortBy","filterTypes","boolean","rows","rowValue","defaultColumn","beforeIndex","beforeRecord","$splice","tableInstance","useTable","rowIndex","columnId","oldData","$set","autoResetSelectedRows","manualRowSelectedKey","useFilters","useGlobalFilter","useSortBy","useRowSelect","getTableProps","getTableBodyProps","headerGroups","prepareRow","visibleColumns","colSpan","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","canFilter","getRowProps","AbbrTools","getDataFromXLS","workbook","XLSX","read","raw","utils","sheet_to_json","Sheets","SheetNames","enabled","abbr","readAsBinaryString","wb","book_new","sht","json_to_sheet","book_append_sheet","writeFile","confirm","res","xhttp","XMLHttpRequest","responseType","response","open","SampleAbbrFile","send","AbbrsViewer","handleCardClick","word","This","activeElement","anchorNode","firstChild","ta","onSelReplace","selectionStart","selectionEnd","SynonymViewer","getSynonyms","phrase","onreadystatechange","readyState","dat","responseText","synonyms","item","hidden","prevProps","mainBody","replacedWord","otherAbbrs","abbrDict","header","onMouseDown","faPlus","explanation","noResults","SynonymList","Synonym","mainAbbrDisp","fontWeight","enabledAbbrDisp","disabledAbbrDisp","enabledAbbrs","fontStyle","disabled","disabledAbbrs","BulletApp","initialText","initialWidth","initialAbbrData","initialEditorState","setEnableOptim","setWidth","abbrData","setAbbrData","setAbbrDict","setSelection","currentTab","setCurrentTab","showThesaurus","setShowThesaurus","EditorState","fromJS","createWithContent","ContentState","createFromText","newAbbrDict","forEach","fullWord","String","push","finalAbbrDict","Object","abbrs","allApprovedAbbrs","string","regExp","p1","p2","p3","handleThesaurusHide","tabContents","newSel","trim","newWidth","selectionsToReplace","contentState","block","regex","matchArr","exec","findWithRegex","anchorOffset","focusOffset","SelectionState","createEmpty","merge","newContentState","reverse","Modifier","replaceText","newText","getPlainText","toJS","settingsArray","trailingSpaces","newEnd","newSelectionState","newContent","newEditorStateSelect","forceSelection","tab","newTab","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","getItem","WebFont","load","custom","families","isArray","ReactDOM","getElementById","xh","DONE","Count","incrementVisitors","URL","process","origin","addEventListener","fetch","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sdAIMA,EAAQC,EAAQ,KAChBC,EAAcD,EAAQ,KAC5BD,EAAMG,oBAAoBC,UAAYF,E,IAGhCG,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,WAAa,SAACC,GACV,GAAK,EAAKC,aAAaC,QAAQC,MAA/B,CAII,IAAIC,EAAW,SAACC,GAAWC,QAAQC,IAAIF,IACf,QAApB,EAAKG,MAAMC,KACXL,EAAW,EAAKM,eACW,SAApB,EAAKF,MAAMC,OAClBL,EAAW,EAAKO,iBAIpBP,EAAS,EAAKH,aAAaC,QAAQU,MAAM,IACzC,EAAKX,aAAaC,QAAQC,MAAQ,QAZlCG,QAAQC,IAAI,mBAXD,EA0BnBM,WAAa,SAACC,GACV,OAAO,WACH,EAAKC,SAAS,CACVN,KAAMK,IAEV,EAAKb,aAAaC,QAAQc,UA/Bf,EAkCnBN,eAAiB,SAACL,GAAU,IAAD,EAsP/B,SAA2BY,GAGvB,IAAMC,EAAWD,EAASE,cAAcC,MAAK,SAAUC,GACnD,IAAMC,EAAa,IAAIC,WAAWF,GAElC,OAAO7B,EAAMgC,YAAY,CAAEC,KAAMH,IAAcI,WAI7CC,EAAST,EAASE,MAAK,SAAUQ,GACnC,OAAOA,EAAID,YAGTE,EAAcX,EAASE,MAAK,SAAUQ,GACxC,OAAOA,EAAIE,cAAcV,MAAK,SAAUW,GAGpC,OAFeA,EAAOC,KAAKC,OAAO,wBAElB,GADJF,EAAOC,KAAKC,OAAO,8BAIjCC,EAAaC,QAAQC,IAAI,CAACP,EAAaF,IACvCU,EAAcH,EAAWd,MAAK,SAAUkB,GAE1C,IAAMC,EAAWD,EAAQ,GAGrBE,EAFYF,EAAQ,GAEA,SACxBE,EAAaA,EAAWC,QAAQ,SAAU,MAE1C,IARmD,EAS7CC,GADS,IAAIC,WACGC,gBAAgBJ,EAAY,YAE9CK,EAAa,GAXkC,cAY/BC,EAAMV,IAAIG,GAAV,QAZ+B,IAYnD,2BAAmD,CAAC,IAA3CQ,EAA0C,QAE/CF,GADkBH,EAAOM,cAAcD,GACfE,UAAY,MAdW,8BAgBnD,OAAOJ,KAGLK,EAAchB,EAAWd,MAAK,SAAUkB,GAE1C,IAFmD,EAE7CC,EAAWD,EAAQ,GAGnBa,EAFUb,EAAQ,GAEG,SAErBI,GADS,IAAIC,WACGC,gBAAgBO,EAAa,YAE/CC,EAAQ,GACRC,EAAY,GACZC,EAAS,GACTC,EAAI,EAZ2C,cAa/BT,EAAMV,IAAIG,GAAV,QAb+B,IAanD,2BAAmD,CAAC,IAA3CQ,EAA0C,QACzCS,EAAYd,EAAOM,cAAc,eAAiBD,EAAU,KAClEK,EAAMG,GAAKC,EAAUR,cAAc,QAAQS,aAAa,YACxDJ,EAAUE,GAAKC,EAAUR,cAAc,QAAQS,aAAa,QAC5DH,EAAOC,GAAKC,EAAUC,aAAa,KACnCF,GAAK,GAlB0C,8BAoBnD,cAAiBH,EAAjB,eAAwB,CACpB,GADS,OACIA,EAAM,GAAI,CACnB9C,QAAQC,IAAI,6DACZ,OAGR,cAAqB8C,EAArB,eAAgC,CAC5B,GADa,OACIA,EAAU,GAAI,CAC3B/C,QAAQC,IAAI,6DACZ,OAGR,cAAkB+C,EAAlB,eAA0B,CACtB,GADU,OACIA,EAAO,GAAI,CACrBhD,QAAQC,IAAI,yDACZ,OAIR,MAAO,CAAE,KAAQ6C,EAAM,GAAI,SAAYC,EAAU,GAAI,MAASC,EAAO,OAKzE,MAAO,CAAEjB,cAAaa,eA1UmBQ,CAAkBrD,GAA/CgC,EADe,EACfA,YAAaa,EADE,EACFA,YAIfS,EAAc,EAAK7D,MAAM8D,aACzBC,EAAe,EAAK/D,MAAMgE,cAEhC3B,QAAQC,IAAI,CAACC,EAAaa,IAAc9B,MAAK,YAA8B,IAAD,mBAA3B2C,EAA2B,KAAdC,EAAc,KACtEH,EAAaI,WAAWD,EAASE,OAAjCL,GAGA,IAAMM,GACF,IAAIxB,WAAYC,gBAAgBmB,EAAa,aAAaK,gBAAgBC,YAC9EV,EAAYQ,EAAZR,OAhDW,EAoDnBhD,gBAAkB,SAACN,GACf,IAAMiE,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACxE,GAEb,IAAMyB,EAAOgD,KAAKC,MAAM1E,EAAE2E,OAAO5C,QAEjC,EAAKjC,MAAM8E,aAAanD,IAE5B6C,EAAOO,WAAWxE,IA5DH,EA+DnByE,SAAW,WACP,EAAK/D,SAAS,CAAEgE,UAAU,KAhEX,EAkEnBC,WAAa,WACT,IAAM9E,EAAU,EAAKM,MAAMuE,SAC3B,EAAKhE,SAAS,CAAEgE,UAAW7E,KAlE3B,EAAKD,aAAegF,IAAMC,YAC1B,EAAK1E,MAAQ,CACTC,KAAM,OACNsE,UAAU,GALC,E,qDAuEf,IAAMI,EAAYC,KAAK5E,MAAMuE,SAAW,YAAc,GACtD,OACI,sBAAKM,UAAW,YAAcF,EAA9B,UACI,uBAAO1E,KAAK,OAAO6E,SAAUF,KAAKrF,WAAYwF,MAAO,CAAEC,QAAS,QAAUC,IAAKL,KAAKnF,eACpF,qBAAKoF,UAAU,mBAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,wBAAQA,UAAU,SAASK,QAASN,KAAKvE,WAAW,OAApD,oBACA,wBAAQwE,UAAU,SAASK,QAASN,KAAKJ,WAAYW,gBAAc,OAAOC,gBAAc,cAAxF,SACI,sBAAMP,UAAU,OAAhB,SAEI,cAAC,IAAD,CAAiBQ,KAAMC,eAKvC,qBAAKT,UAAU,gBAAgBU,GAAG,cAAcC,KAAK,OAAOC,aAAcb,KAAKN,SAA/E,SACI,sBAAKO,UAAU,mBAAf,UACI,mBAAGa,KAAK,KAAKb,UAAU,gBAAgBK,QAASN,KAAKvE,WAAW,OAAhE,iBACA,mBAAGqF,KAAK,KAAKb,UAAU,gBAAgBK,QAASN,KAAKvE,WAAW,QAAhE,8B,GA1FEoE,IAAMkB,eAkG1BC,E,kDACF,WAAYtG,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,GAFE,E,qDAOf,IAAM6F,EAAW,QACXC,EAAW,QACXC,EAAW,QACjB,OACI,sBAAKlB,UAAU,mBAAf,UAEI,sBAAKA,UAAU,2BAAf,UACI,sBAAKA,UAAU,0BAAf,UACI,uBAAOA,UAAU,QAAQU,GAAG,aAAatF,KAAK,SAAS+F,IAAI,MAAMC,IAAI,MAAMC,KAAK,OAAOvG,MAAOiF,KAAKtF,MAAMoE,MAAOoB,SAAUF,KAAKtF,MAAM6G,gBACrI,sBAAMtB,UAAU,gBAAhB,mBAEJ,sBAAKA,UAAU,6BAAf,UACI,mBAAIA,UAAW,sBAAyBD,KAAKtF,MAAMoE,QAAUmC,EAAW,GAAK,eACzEX,QAASN,KAAKtF,MAAMgE,cAAcuC,GADtC,iBAEA,mBAAGhB,UAAW,sBAAyBD,KAAKtF,MAAMoE,QAAUoC,EAAW,GAAK,eACxEZ,QAASN,KAAKtF,MAAMgE,cAAcwC,GADtC,iBAEA,mBAAIjB,UAAW,mBAAqBD,KAAKtF,MAAMoE,QAAUqC,EAAW,GAAK,eACrEb,QAASN,KAAKtF,MAAMgE,cAAcyC,GADtC,uBAMR,mBAAIlB,UAAW,0BAA4BD,KAAKtF,MAAM8G,YAAc,GAAK,eACrElB,QAASN,KAAKtF,MAAM+G,cAAed,GAAG,cAD1C,+B,GA9BUd,IAAMkB,eAqC1BW,E,uKAGE,OACI,wBAAQzB,UAAU,SAASK,QAASN,KAAKtF,MAAMiH,WAA/C,2C,GAJa9B,IAAMkB,eASzBa,E,kDACF,WAAYlH,GAAQ,IAAD,8BACf,cAAMA,IAIVmH,OAAS,WACL,IAAMC,EAAW,EAAKpH,MAAMmH,SAEtBE,EAAa1C,KAAK2C,UAAU,CAACF,IACnC,IACIG,aAAaC,QAAQ,kBAAmBH,GACxC7G,QAAQC,IAAI,8DAAgE4G,EAAWI,QACzF,MAAOC,GACL,GAAiB,kBAAbA,EAAIC,KAGJ,MAAMD,EAFNE,MAAM,+GAdC,EAoBnBC,SAAW,WACP,IAAMT,EAAW,EAAKpH,MAAMmH,SAEtBE,EAAa1C,KAAK2C,UAAU,CAACF,IAC7BU,EAAU,uCAAyCC,mBAAmBV,GAC5E,EAAKW,UAAU5H,QAAQgG,KAAO0B,EAC9B,EAAKE,UAAU5H,QAAQc,QACvBV,QAAQC,IAAI,iEAAmE4G,EAAWI,SA3B3E,EA8BnBzC,SAAW,WACP,EAAK/D,SAAS,CAAEgE,UAAU,KA/BX,EAiCnBC,WAAa,WACT,IAAM9E,EAAU,EAAKM,MAAMuE,SAC3B,EAAKhE,SAAS,CAAEgE,UAAW7E,KAjC3B,EAAK4H,UAAY7C,IAAMC,YACvB,EAAK1E,MAAQ,CAAEuE,UAAU,GAHV,E,qDAsCf,IAAMI,EAAYC,KAAK5E,MAAMuE,SAAW,YAAc,GACtD,OACI,sBAAKM,UAAW,YAAcF,EAA9B,UACI,qBAAKE,UAAU,mBAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,wBAAQA,UAAU,SAASK,QAASN,KAAK6B,OAAzC,mBACA,wBAAQ5B,UAAU,SAASM,gBAAc,OAAOC,gBAAc,YAA9D,SACI,sBAAMP,UAAU,OAAOK,QAASN,KAAKJ,WAArC,SACI,cAAC,IAAD,CAAiBa,KAAMC,eAKvC,qBAAKT,UAAU,gBAAgBU,GAAG,YAAYC,KAAK,OAAOC,aAAcb,KAAKN,SAA7E,SACI,sBAAKO,UAAU,mBAAf,UACI,mBAAGa,KAAK,KAAKb,UAAU,gBAAgBK,QAASN,KAAK6B,OAArD,oBACA,mBAAGf,KAAK,KAAKb,UAAU,gBAAgBK,QAASN,KAAKuC,SAArD,uBAIR,mBAAGzB,KAAK,KAAKX,MAAO,CAAEC,QAAS,QAAUuC,SAAS,gBAAgBtC,IAAKL,KAAK0C,mB,GA3DpE7C,IAAMkB,eAgExB6B,E,uKAEE,OACI,qBAAI3C,UAAU,QAAd,UAAsB,sBAAMA,UAAU,OAAhB,iBAClB,sBAAMA,UAAU,OAAhB,kBADJ,KAEI,sBAAMA,UAAU,OAAhB,iBAFJ,UAGI,sBAAMA,UAAU,OAAhB,gBAHJ,WAII,sBAAMA,UAAU,OAAhB,gBAJJ,a,GAHOJ,IAAMkB,eAYnB8B,E,uKAEE,OACI,oBAAI5C,UAAU,SAASK,QAASN,KAAKtF,MAAMoI,OAAQvC,gBAAc,OAAOC,gBAAc,iBAAtF,UACI,6CAAsB,sBAAMP,UAAU,OAAhB,SAClB,cAAC,IAAD,CAAiBQ,KAAMC,e,GALdb,IAAMkB,eAW7BgC,E,uKAEE,OACI,qBAAK9C,UAAU,SAASW,KAAK,aAAaoC,aAAW,kBAArD,SACI,sBAAK/C,UAAU,eAAf,UACI,qBAAKA,UAAU,cAAf,SACI,cAAC,EAAD,CAAW4B,OAAQ7B,KAAKtF,MAAMmH,WAElC,qBAAK5B,UAAU,cAAf,SACI,cAAC,EAAD,CAAaT,aAAcQ,KAAKtF,MAAM8E,aAAchB,aAAcwB,KAAKtF,MAAM8D,aAAcE,cAAesB,KAAKtF,MAAMgE,kBAEzH,qBAAKuB,UAAU,cAAf,SACI,cAAC,EAAD,CACIuB,YAAaxB,KAAKtF,MAAM8G,YAAaC,cAAezB,KAAKtF,MAAM+G,cAC/D3C,MAAOkB,KAAKtF,MAAMoE,MAAOyC,cAAevB,KAAKtF,MAAM6G,cACnD7C,cAAesB,KAAKtF,MAAMgE,kBAElC,qBAAKuB,UAAU,cAAf,SACI,cAAC,EAAD,CAAY0B,WAAY3B,KAAKtF,MAAMiH,eAEvC,qBAAK1B,UAAU,cAAf,SACI,cAAC,EAAD,CAAgB6C,OAAQ9C,KAAKtF,MAAMuI,6B,GArB/BpD,IAAMkB,eA8B5BrD,EAAQ,CACVV,IAAK,CACD,MAAS,CACL,OAAU,CAAC,kBAAmB,eAAgB,eAAgB,gBAC9D,YAAe,aAEnB,OAAU,CACN,OAAU,CAAC,0BAA2B,6BACtC,YAAe,aAEnB,MAAS,CACL,OAAU,CAAC,YAAa,cAAe,aAAc,YAAa,eAAgB,cAClF,YAAe,aAEnB,MAAS,CACL,OAAU,CAAC,YAAa,cAAe,aAAc,cAAe,eAAgB,cACpF,YAAe,eA4F3B,SAASkG,EAAiBC,GAEtB,IAAMC,EAAiBD,EAAYE,eAC7BC,EAAYF,EAAeG,eAC3BC,EAAeL,EAAYM,oBAAoBC,eAAeJ,GAC9DK,EAAQP,EAAeQ,iBACvBC,EAAMT,EAAeU,eACrBC,EAAeP,EAAaQ,UAAUC,MAAMN,EAAOE,GACzD,MAAO,CACHT,iBACAE,YACAE,eACAG,QACAE,MACAE,gBAIR,IChYMG,EACS,EADTA,EAEU,EAFVA,GAGQ,EAHRA,GAMc,EANdA,EAOQ,SAACC,GACP,OAAOA,EAASC,MAAM,UAK9B,SAASC,EAAT,GAA6E,IAAjDlB,EAAgD,EAAhDA,YAAamB,EAAmC,EAAnCA,eAAgBxF,EAAmB,EAAnBA,MAAUpE,EAAS,wDAElE6J,EAAiB,eAFiD,EAGtC1E,IAAM2E,SAAS,IAAIC,KAHmB,mBAGjEC,EAHiE,KAGtDC,EAHsD,KAiExE,OATA9E,IAAM+E,WAAU,WACZ,IADgB,EACZC,EAAe,IAAIJ,IADP,cAEDtB,EAAYM,oBAAoBqB,cAAcC,QAF7C,IAEhB,IAAI,EAAJ,qBAAoE,CAAC,IAA7DC,EAA4D,QAC1DC,EAAWC,SAAStH,cAAT,+BAA+CoH,EAA/C,WACdC,GAAUJ,EAAaM,IAAIH,EAAKC,EAASG,wBAAwBC,SAJxD,8BAMhBV,EAAaE,KACf,CAAC1B,IAGC,sBAAKlD,UAAU,+BAAf,UACI,sBAAKA,UAAU,SAASE,MAAO,CAC3BrB,MAAOA,EAAQ,MADnB,UAGI,oBAAImB,UAAU,WAAd,iCACA,qBAAKA,UAAU,SAASE,MAAO,CAAEmF,SAAWxG,EAAM,EAAK,MAAvD,SACI,cAAC,SAAD,CACIqE,YAAaA,EAAajD,SA1D7B,SAACqF,GAAmB,IAYzBxB,EAAiBb,EAAiBqC,GAAlCxB,aACJrJ,EAAM8K,UAA6B,KAAjBzB,GAAqBrJ,EAAM8K,SAASzB,GAE1DO,EAAeiB,IA2C+CE,iBApEzC,SAACC,EAASvC,GAC/B,IAAMwC,EAAWC,YAAUH,iBAAiBtC,EAAauC,GACzD,OAAIC,GACArB,EAAeqB,GACR,WAEJ,sBAiEH,sBAAK1F,UAAU,SAAf,UACI,oBAAIA,UAAU,WAAd,+BACA,qBAAKA,UAAU,SAASU,GAAI4D,EAAgBpE,MAAO,CAAErB,MAAQA,EAAM,EAAK,MACpE+G,UA7CO,SAACC,GACpB,IAAMC,EAAYC,OAAO3C,eAAe4C,WACtB,KAAdF,GACArL,EAAM8K,SAASO,IA0CoBG,UArC3C,SAAsBtL,GAClB,GAAIA,EAAEuL,SAAyB,KAAdvL,EAAEwL,UACfxL,EAAEyL,iBAGEzL,EAAE2E,OAAOoB,GAAG2F,MAAM,IAAIC,OAAOhC,KAAkB,CAC/C,IAAMiC,EAAQtB,SAASuB,cACvBD,EAAME,WAAW9L,EAAE2E,QACnByG,OAAO3C,eAAesD,kBACtBX,OAAO3C,eAAeuD,SAASJ,KA4ByBK,SAAS,IADjE,SAEKC,MAAMC,KAAK5D,EAAYM,oBAAoBqB,eAAe,YAAmB,IAAD,mBAAhBE,EAAgB,KACrEgC,EADqE,KACxDhD,UAGjB,OAFItJ,EAAMuM,eAAcD,EAAOtM,EAAMuM,aAAaD,IAE3C,cAACE,EAAD,CAAkBF,KAAMA,EAAMG,QAvGhDC,mBAuGyDtI,EAAcuG,OAAQX,EAAU2C,IAAIrC,GAC9ExD,YAAa9G,EAAM8G,aADHwD,cAmB5C,SAASkC,EAAT,GAA8C,IAA5BF,EAA2B,EAA3BA,KAAMG,EAAqB,EAArBA,QAAYzM,EAAS,kCACnC4M,EAAYzH,IAAM0H,OAAO,MADU,EAEL1H,IAAM2E,SAAS,CAAC,MAFX,mBAElCgD,EAFkC,KAEtBC,EAFsB,OAIf5H,IAAM2E,SAAS,WAJA,mBAIlCkD,EAJkC,KAI3BC,EAJ2B,OAKX9H,IAAM2E,UAAS,GALJ,mBAKlCoD,EALkC,KAKzBC,EALyB,OAMHhI,IAAM2E,SAASN,GANZ,mBAMlC4D,EANkC,KAMrBC,EANqB,OAODlI,IAAM2E,SAAS,CAAEwC,KAAM,KAPtB,mBAOlCgB,EAPkC,KAOvBC,EAPuB,KASnCC,EAAa,SAACC,GAEhB,IAAMC,EAAUD,EAAOD,WAAW,MAGlC,OAFAE,EAAQC,KAAO,uBACfD,EAAQE,UAAY,OACbF,GA+CX,OA1CAvI,IAAM+E,WAAU,WAEZ,IAAMwD,EAAUF,EAAWZ,EAAUxM,SACrCmN,EAAmBM,EAAiBvB,EAAMoB,EAASjB,MAEpD,CAACH,EAAMG,EAASzM,EAAM8G,cAMzB3B,IAAM+E,WAAU,WAIZ,GAFAiD,GAAW,GACXJ,EAAcO,EAAUhB,MACpBtM,EAAM8G,YAAa,CACnB,IACMgH,EAmDlB,SAAkBrE,EAAUsE,GAExB,IAAMC,EAAe,SACfC,EAAc,SAGhBC,EAAW1E,EAAgBC,GAEzB0E,EAAcJ,EAAQtE,GAE5B,GAA6B,IAAzB0E,EAAYC,SACZ,OAAOD,EAIX,IAAIE,EAAcF,EACdG,EAAeH,EACbI,EAAYJ,EAAYC,UAAY,EAAKJ,EAAeC,EAE1DO,EAAmBhF,EAEvB,SAASiF,EAAUC,GACf,IAAcjL,EAAVkL,EAAO,EACX,GAAmB,IAAfD,EAAIjH,OAAc,OAAOkH,EAC7B,IAAKlL,EAAI,EAAGA,EAAIiL,EAAIjH,OAAQhE,IAE1BkL,GAASA,GAAQ,GAAKA,EADhBD,EAAIE,WAAWnL,GAErBkL,GAAQ,EAEV,OAAOA,EAGX,SAASE,EAAaC,EAAMnI,GACxB,OAAOoI,KAAKC,MAAMD,KAAKE,IAAKF,KAAKC,MAAM,EAAIP,EAASK,GAAQ,GAAK,IAAU,KAAUC,KAAKC,MAAMrI,IAIpG,KAAO2H,EAAaF,SAAW,GAAKE,EAAaF,SAAW5E,GAAsB,CAG9E,IAAI0F,EAAWL,EAAaX,EAASiB,KAAK,IAAKjB,EAASzG,OAAS,EAAI,GAAK,EAG1EyG,EAASkB,OACLF,EAAU,EACVhB,EAAS3E,MAAM2F,EAAUA,EAAW,GAAGC,KAAKZ,IAIhD,IAEIc,EAAatB,EAFCG,EAASiB,KAAK,MAIhC,GAAIhB,EAAYC,UAAY,GAAKiB,EAAWjB,SAAW,EAAG,CAEtDE,EAAeD,EACfG,EAAmBhF,EACnB,MACG,GAAI2E,EAAYC,SAAW,GAAKiB,EAAWjB,SAAW,EAAG,CAE5DE,EAAee,EACfb,EAAmBhF,EACnB,MACG,GAAI0E,EAASzG,QAAU,EAAG,CAE7B6G,EAAee,EACfb,EAAmBhF,EACnB,MAEJ6E,EAAcgB,EAElB,MAAO,CACHC,OAAQd,EACRlB,UAAWgB,GA5HciB,CAASjD,GADZ,SAACkD,GAAD,OAAS3B,EAAiB2B,EAAKhC,EAAWZ,EAAUxM,SAAUqM,MAEhFU,GAAW,GACXE,EAAeS,EAAawB,QAC5BvC,EAAce,EAAaR,UAAUhB,WAGrCS,EAAcO,EAAUhB,MACxBa,GAAW,KAGhB,CAACG,EAAWtN,EAAM8G,YAAawF,EAAMG,IAGxCtH,IAAM+E,WAAU,WAER+C,EADAC,EACS,SACFE,IAAgB5D,EACd,MAEA,aAEd,CAAC0D,EAASJ,EAAYM,IAKrB,qCACI,wBACIzH,IAAKiH,EACLnH,MAAO,CACHgK,WAAY,SACZC,SAAU,WACVC,IAAK,UACLC,KAAM,aAEd,qBAAKnK,MAAO,CACRoK,UAAW7P,EAAM2K,OACjBqC,MAAOA,EACPtH,QAAQ,OACRoK,cAAc,UACf3E,UAAWnL,EAAM+P,YALpB,SAMKjD,EAAWkD,KAAI,SAACC,GACb,OAAO,sBAAiBxK,MAAO,CAACyK,WAAW,OAApC,SAA6CD,GAAlCA,WAuFtC,SAASpC,EAAiBvB,EAAMoB,EAAStJ,GAElCkI,EAAKV,MAAM,OACVpL,QAAQ2P,MAAM,kDAElB,IAAMC,EAAW,SAACZ,GAAD,OAAU9B,EAAQ2C,YAAYb,GAAMpL,OAC/CkM,EAAYF,EAAS9D,EAAKiE,WAEhC,GAAID,EAAYlM,EACZ,MAAO,CACHkI,KAAM,CAACA,GACPgE,UAAWA,EACXE,MAAO,EACPpC,SAAUkC,EAAYlM,GAQ1B,IAAMqM,EAAYnE,EAAK5C,MAAM,sCAK7B,GAAI0G,EAASK,EAAU,IAAMrM,EAAO,CAEhC,IADA,IAAIsM,EAAY,EACPjN,EAAI,EAAGA,GAAKgN,EAAUhJ,OAAQhE,IAAK,CAGxC,GADkB2M,EADDK,EAAUlH,MAAM,EAAG9F,GAAG0L,KAAK,IAAIoB,WAEhCnM,EAAO,CACnBsM,EAAYjN,EAAI,EAChB,OAGR,IAAMkN,EAAeF,EAAUlH,MAAMmH,EAAWD,EAAUhJ,QAAQ0H,KAAK,IAEvE,GAAIwB,IAAiBrE,EAEjB,OADA9L,QAAQoQ,KAAK,eAAiBtE,EAAO,sBAC9B,CACHA,KAAM,CAACA,GACPgE,YACAE,MAAO,EACPpC,SAAUkC,EAAYlM,GAG1B,IAAMyM,EAAiBhD,EAAiB8C,EAAcjD,EAAStJ,GAE/D,MAAO,CACHkI,KAAK,CAAEmE,EAAUlH,MAAM,EAAGmH,GAAWvB,KAAK,KAAtC,mBAA8C0B,EAAevE,OACjEgE,UAAWA,EACXE,MAAO,EAAIK,EAAeL,MAC1BpC,SAAUkC,EAAYlM,GAM9B,IAAM0M,EAAeR,EAAahE,EAAK7E,OACjCsJ,EAAaC,SAAS5M,EAAQ0M,GAC9BG,EAAkBb,EAAS9D,EAAK4E,UAAU,EAAGH,IAC/CL,EAAYK,EAChB,GAAIE,EAAkB7M,EAClB,IAAK,IAAIX,EAAIsN,EAAa,EAAGtN,EAAI,EAAGA,IAAK,CAErC,GADuB2M,EAAS9D,EAAK4E,UAAU,EAAGzN,IAC7BW,EAAO,CACxBsM,EAAYjN,EACZ,YAGL,GAAIwN,EAAkB7M,EACzB,IAAK,IAAIX,EAAIsN,EAAYtN,GAAK6I,EAAK7E,OAAQhE,IAAK,CAG5C,GADuB2M,EAAS9D,EAAK4E,UAAU,EAAGzN,IAC7BW,EAAO,CACxBsM,EAAYjN,EAAI,EAChB,OAIZ,IAAMkN,EAAerE,EAAK4E,UAAUR,EAAWpE,EAAK7E,QACpD,GAAIkJ,IAAiBrE,EAEjB,OADA9L,QAAQoQ,KAAK,0CAA6CtE,EAAO,sBAC1D,CACHA,KAAM,CAACA,GACPgE,YACAE,MAAO,EACPpC,SAAUkC,EAAYlM,GAG1B,IAAMyM,EAAiBhD,EAAiB8C,EAAcjD,EAAStJ,GAE/D,MAAO,CACHkI,KAAK,CAAEA,EAAK4E,UAAU,EAAGR,IAArB,mBAAoCG,EAAevE,OACvDgE,UAAWA,EACXE,MAAO,EAAIK,EAAeL,MAC1BpC,SAAUkC,EAAYlM,G,qBCtY3B,MAA0B,mC,0DCgBzC,SAAS+M,EAAT,GAII,IAHAC,EAGD,EAHCA,sBACAC,EAED,EAFCA,aACAC,EACD,EADCA,gBAEMC,EAAQH,EAAsB3J,OADrC,EAE2BtC,IAAM2E,SAASuH,GAF1C,mBAEQhR,EAFR,KAEemR,EAFf,KAGOhM,EAAWiM,4BAAiB,SAAApR,GAC9BiR,EAAgBjR,QAASqR,KAC1B,KAEH,OACI,2CACY,IACR,uBAAOnM,UAAU,QACblF,MAAOA,GAAS,GAChBmF,SAAU,SAAAtF,GACNsR,EAAStR,EAAE2E,OAAOxE,OAClBmF,EAAStF,EAAE2E,OAAOxE,QAEtBsR,YAAW,UAAKJ,EAAL,YACX9L,MAAO,CACHmM,SAAU,SACVC,OAAQ,UAQ5B,SAASC,EAAT,GAEI,IAAD,IADCC,OAAUC,EACX,EADWA,YAAaC,EACxB,EADwBA,UAGvB,OACI,uBAAO1M,UAAU,QACblF,MAAO2R,GAAe,GACtBxM,SAAU,SAAAtF,GACN+R,EAAU/R,EAAE2E,OAAOxE,YAASqR,IAEhCC,YAAW,cAOvB,SAASO,EAAT,GAEI,IAAD,IADCH,OAAUC,EACX,EADWA,YAAaC,EACxB,EADwBA,UAKjBE,EAAUhN,IAAMiN,SAAQ,iBAAO,CAAC,MAAO,UAAW,cAAc,IAChEC,EAASlN,IAAMiN,SAAQ,iBAAO,MAACV,GAAW,GAAM,KAAS,IAEzDY,EAAmBH,EAAQE,EAAOE,QAAQP,IAGhD,OACI,qBAAKzM,UAAU,SAAf,SACI,wBACIlF,MAAOiS,EACP9M,SAAU,SAAAtF,GACN+R,EAAUI,EAAOF,EAAQI,QAAQrS,EAAE2E,OAAOxE,UAHlD,SAMK8R,EAAQnC,KAAI,SAAC1D,EAAM7I,GAAP,OACT,wBAAgBpD,MAAOiM,EAAvB,SACKA,GADQ7I,UAUjC,IAAM+O,EAAiB,SAAC,GAKjB,IAJHnS,EAIE,EAJFA,MACAoS,EAGE,EAHFA,IACUxM,EAER,EAFF8L,OAAU9L,GACVyM,EACE,EADFA,qBACE,EAIEvN,IAAMiN,SAAQ,kBAAIK,EAAIE,8BAA4B,CAACF,IADtCG,EAHf,EAGKpN,SAAuBC,EAH5B,EAG4BA,MAAyBoN,GAHrD,EAGmCC,cAHnC,qDAMItN,EAAWL,IAAM4N,aAAY,SAAC7S,GAChCwS,EAAqBD,EAAIO,MAAO/M,EAAI/F,EAAE2E,OAAOoO,SAC7CL,EAAY1S,KACd,CAAC0S,EAAa3M,EAAIwM,EAAIO,MAAON,IAEzBQ,EAAcC,IAAO1N,EAAO,CAAC,OAAU,CAACC,QAAQ,UACtD,OACI,qBAAKD,MAAO,CAACmI,UAAW,UAAxB,SACA,wBAAOrI,UAAU,gBAAjB,UACI,mCAAO5E,KAAK,WAAW6E,SAAUA,EAAUC,MAAOyN,GAAiBL,IACnE,cAAC,IAAD,CAAiBO,KAAK,KAAKrN,KAAM1F,EAAOgT,IAAgBC,YAO9DC,EAAuB,SAAC,GAMP,IALZC,EAKW,EALlBnT,MACO2S,EAIW,EAJlBP,IAAOO,MACG/M,EAGQ,EAHlB8L,OAAU9L,GACVyM,EAEkB,EAFlBA,qBAEA/R,EAAkB,uDAAX,OAAW,EAEQwE,IAAM2E,SAAS0J,GAFvB,mBAEXnT,EAFW,KAEJmR,EAFI,KAIZhM,EAAW,SAAAtF,GAETsR,EADS,aAAT7Q,EACST,EAAE2E,OAAOoO,QAET/S,EAAE2E,OAAOxE,QAKpBoT,EAAS,WACXf,EAAqBM,EAAO/M,EAAI5F,IASpC,OALA8E,IAAM+E,WAAU,WACZsH,EAASgC,KACV,CAACA,IAGG,uBAAOjO,UAAU,QAAQ5E,KAAMA,EAAMN,MAAOA,EAAOmF,SAAUA,EAAUiO,OAAQA,KA2K1F,IAAMC,EAAM,SAAC,GAA4B,IAA1BjB,EAAyB,EAAzBA,IAAKO,EAAoB,EAApBA,MAAOW,EAAa,EAAbA,OAEvB,OACI,+BAEKlB,EAAImB,MAAM5D,KAAI,SAAA6D,GACX,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKE,OAAO,cAErD,+BACI,sBAAMxO,UAAU,gBAAgBK,QAAS,kBAAM+N,EAAOK,UAAUhB,IAAhE,SACI,cAAC,IAAD,CAAiBjN,KAAMkO,IAAQb,KAAK,SAExC,sBAAM7N,UAAU,gBAAgBK,QAAS,kBAAM+N,EAAOO,UAAUlB,IAAhE,SACI,cAAC,IAAD,CAAiBjN,KAAMoO,IAASf,KAAK,gBAO1CgB,GAzLf,YAAuC,IAAlBzS,EAAiB,EAAjBA,KAAM0S,EAAW,EAAXA,QAGjBC,EAAUnP,IAAMiN,SAAQ,iBAAM,CAChC,CACImC,OAAQ,SACRC,SAAU,UACVC,KAAMjC,EACNkC,OAAQxC,EACRyC,OAAQ,UACRC,eAAe,GAEnB,CACIL,OAAQ,OACRC,SAAU,QACVC,KAAMlB,GAEV,CACIgB,OAAQ,eACRC,SAAU,OACVC,KAAMlB,MAEX,IAgBGsB,EAAc1P,IAAMiN,SACtB,iBAAO,CAEH0C,QAAS,SAACC,EAAM9O,EAAI+L,GAChB,OAAO+C,EAAKJ,QAAO,SAAAlC,GACf,IAAMuC,EAAWvC,EAAIJ,OAAOpM,GAC5B,YAAoByL,IAAbsD,GACAA,IAAahD,SAIhC,IAIEiD,EAAgB9P,IAAMiN,SACxB,iBAAO,CAEHsC,OAAQ5C,KAEZ,IAGEkC,EAAY,SAACkB,GACf,IAAMC,EAAexT,EAAKuT,GAC1Bb,EACIlB,IAAOxR,EAAM,CACTyT,QAAS,CACL,CAACF,EAAc,EAAG,EAAGC,QAM/BjB,EAAY,SAACgB,GACfb,EACIlB,IAAOxR,EAAM,CACTyT,QAAS,CACL,CAACF,EAAa,QAOxBG,EAAgBC,mBAClB,CACIhB,UACA3S,OACAsT,gBACAJ,cACAnC,qBA9DqB,SAAC6C,EAAUC,EAAUnV,GAC9CgU,GAAQ,SAAAoB,GAKJ,OAJiBtC,IAAOsC,EAAD,eACnBF,EADmB,eAEfC,EAAW,CAACE,KAAMrV,UA2D1BsV,uBAAuB,EACvBC,qBAAsB,WAG1BC,aACAC,kBACAC,YACAC,gBAIAC,EASAZ,EATAY,cACAC,EAQAb,EARAa,kBACAC,EAOAd,EAPAc,aACApB,EAMAM,EANAN,KACAqB,EAKAf,EALAe,WACAC,EAIAhB,EAJAgB,eACA3V,EAGA2U,EAHA3U,MACA4Q,EAEA+D,EAFA/D,gBACAF,EACAiE,EADAjE,sBAGJ,OACI,gDAAO7L,UAAU,sBAAyB0Q,KAA1C,cACI,kCACI,6BACI,oBACIK,QAASD,EAAe5O,OACxBhC,MAAO,CACHmI,UAAW,QAHnB,SAMI,cAACuD,EAAD,CACIC,sBAAuBA,EACvBC,aAAc3Q,EAAM2Q,aACpBC,gBAAiBA,QAI5B6E,EAAanG,KAAI,SAAAuG,GACd,OACI,+CAAQA,EAAYC,uBAApB,cAEKD,EAAYE,QAAQzG,KAAI,SAAA+B,GAErB,OACI,+CAAQA,EAAO2E,kBAAf,cACI,gDAAS3E,EAAO4E,wBAAhB,kBAA0C5E,EAAOgC,OAAO,UAAU,+BAAOhC,EAAO6E,SAAY7E,EAAO8E,aAAe,KAAO,KAAQ,KAAjI,QACA,8BAAM9E,EAAO+E,UAAY/E,EAAOgC,OAAO,UAAY,cAI/D,uBAAS,iCAKzB,iDAAWmC,KAAX,aACKnB,EAAK/E,KACF,SAACyC,EAAKO,GAAN,OACIoD,EAAW3D,IACP,cAAC,EAAD,aACIO,MAAOA,EACPP,IAAKA,EACLkB,OAAQ,CAAEK,YAAWE,cACjBzB,EAAIsE,2BC9SxC,SAASC,GAAT,GAAgD,IAA3BrV,EAA0B,EAA1BA,KAAM0S,EAAoB,EAApBA,QAEjBlU,GAFqC,kCAEtBgF,IAAMC,aAuB3B,SAAS6R,EAAe1W,GACpB,IAAMiE,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACxE,GACb,IAAMyB,EAAOzB,EAAE2E,OAAO5C,OAChBiV,EAAWC,IAAKC,KAAKzV,EAAM,CAC7BhB,KAAM,SACN0W,KAAK,IAEHtC,EAAOoC,IAAKG,MAAMC,cACpBL,EAASM,OAAON,EAASO,WAAW,IACpC,CAAE,OAAU,CAAC,UAAW,QAAS,UAChCzH,KAAI,YACG,MAAO,CAAC0H,QADe,EAAxBA,QACkBrX,MADM,EAAfA,MACgBsX,KADD,EAARA,SAMvB5C,EAAK,GAAG2C,QAAQnM,WAAYK,MAAM,YAClCyI,EAAQU,EAAKxL,MAAM,IAEnB8K,EAAQU,IAIhBvQ,EAAOoT,mBAAmBrX,GAa9B,OACI,sBAAKgF,UAAU,UAAf,UACI,uBAAO5E,KAAK,OAAO6E,SAlD3B,SAAqBtF,GAEZC,EAAaC,QAAQC,OAItB4W,EAAe9W,EAAaC,QAAQU,MAAM,IAC1CX,EAAaC,QAAQC,MAAQ,IAJ7BG,QAAQC,IAAI,mBA+C8BkF,IAAKxF,EAAcsF,MAAO,CAAEC,QAAS,UAC/E,wBAAQH,UAAU,SAASK,QARnC,WACIzF,EAAaC,QAAQc,SAOjB,0BACA,wBAAQqE,UAAU,SAASK,QAfnC,WACI,IAAMiS,EAAKV,IAAKG,MAAMQ,WAChBC,EAAMZ,IAAKG,MAAMU,cAAcrW,GACrCwV,IAAKG,MAAMW,kBAAkBJ,EAAIE,EAAK,SACtCZ,IAAKe,UAAUL,EAAI,eAWf,0BACA,wBAAQtS,UAAU,SAASK,QAAS,WAC5B0F,OAAO6M,QAAQ,0FAhEpB,IAAI9V,SAAQ,SAAC+V,GAChB,IAAMC,EAAQ,IAAIC,eAClBD,EAAME,aAAe,OACrBF,EAAM3T,OAAS,WACX0T,EAAIC,EAAMG,WAEdH,EAAMI,KAAK,MAAOC,GAAgB,GAClCL,EAAMM,UACPrX,KAAK2V,IAuDJ,kCAmBG2B,OATf,YAAyC,IAAlBjX,EAAiB,EAAjBA,KAAM0S,EAAW,EAAXA,QACzB,OACI,gCACI,cAAC2C,GAAD,CAAW3C,QAASA,EAAS1S,KAAMA,IACnC,cAAC,GAAD,CAAWA,KAAMA,EAAM0S,QAASA,QCvFtCwE,GAAkB,SAACC,EAAMC,GAC3B,OAAO,SAAC7Y,GAEJ,GADAA,EAAEyL,iBACEnB,SAASwO,gBAAkB1N,OAAO3C,eAAesQ,WAAWC,WAAY,CACxE,IAAMC,EAAK3O,SAASwO,cACpBD,EAAK/Y,MAAMoZ,aAAaD,EAAGE,eAAgBF,EAAGG,aAAcR,MAKlES,G,kDACF,WAAYvZ,GAAQ,IAAD,8BACf,cAAMA,IAMVwZ,YAAc,SAACC,GACX,IAAMpB,EAAQ,IAAIC,eAClBD,EAAMqB,mBAAqB,WACvB,GAAyB,IAArBrB,EAAMsB,YAAqC,MAAjBtB,EAAM/I,OAAgB,CAChD,IAAMsK,EAAMjV,KAAKC,MAAMyT,EAAMwB,cAEV,IAAfD,EAAInS,OACJ,EAAKxG,SAAS,CACV6Y,SAAUF,EAAI5J,KAAI,SAAC+J,GAAW,OAAOA,EAAKjB,UAG9C,EAAK7X,SAAS,CACV6Y,SAAU,OAM1BzB,EAAMI,KAAK,MAAO,4CAA4DgB,GAAQ,GACtFpB,EAAMM,QAxBN,EAAKjY,MAAQ,CACToZ,SAAU,GACVE,QAAQ,GAJG,E,gEA6Bf1U,KAAKkU,YAAYlU,KAAKtF,MAAM8Y,Q,yCAEbmB,GACXA,EAAUnB,OAASxT,KAAKtF,MAAM8Y,MAC9BxT,KAAKkU,YAAYlU,KAAKtF,MAAM8Y,Q,+BAKhC,IAeIoB,EAfEC,EAAe7U,KAAKtF,MAAMuM,aAAajH,KAAKtF,MAAM8Y,MAClDsB,EAAa9U,KAAKtF,MAAMqa,SAAS/U,KAAKtF,MAAM8Y,MAC5CwB,EACF,uBAAM/U,UAAU,gBAAhB,UACI,cAAC,GAAD,CAASuT,KAAMxT,KAAKtF,MAAM8Y,KACtBnB,KAAMwC,IAAiB7U,KAAKtF,MAAM8Y,KAAO,GAAKqB,EAC9CC,WAAYA,GAFqB9U,KAAKtF,MAAM8Y,MAGhD,mBAAGvT,UAAU,gBAAgBgV,YAAa1B,GAAgBvT,KAAKtF,MAAM8Y,KAAMxT,MAA3E,SACI,cAAC,IAAD,CAAiBS,KAAMyU,IAAQpH,KAAK,KAAKpG,MAAM,iBAIrD8M,EAAW,cAAC,GAAD,CAAaV,aAAc9T,KAAKtF,MAAMoZ,aAAiDU,SAAUxU,KAAK5E,MAAMoZ,SAAUO,SAAU/U,KAAKtF,MAAMqa,SAAU9N,aAAcjH,KAAKtF,MAAMuM,cAArHjH,KAAK5E,MAAMoZ,SAAS3K,KAAK,KAC7FsL,EAAc,sBAAMlV,UAAU,cAAhB,+FAAkC,QAChDmV,EAAY,sBAAMnV,UAAU,cAAhB,6BAAkC,QAUpD,OAPI2U,EADoB,KAApB5U,KAAKtF,MAAM8Y,KACA2B,EAC2B,IAA/BnV,KAAK5E,MAAMoZ,SAASrS,OAChBiT,EAEAZ,EAIX,sBAAKvU,UAAU,OAAf,UACI,yBAAQA,UAAU,kDAAlB,UACI,sBAAKA,UAAU,oBAAf,UACI,6CAAiBD,KAAKtF,MAAM8Y,KAAO,IAAM,MACxCxT,KAAKtF,MAAM8Y,KAAOwB,EAAS,MAEhC,mBAAG/U,UAAU,mBAAmBK,QAASN,KAAKtF,MAAMoI,OAApD,SACI,sBAAM7C,UAAU,gBAIxB,qBAAKA,UAAU,eAAeE,MAAO,CAAEkF,OAAQ,QAASyD,SAAU,QAAlE,SAEK8L,W,GA7EO/U,IAAMkB,eAuF5BsU,G,4MAEF9B,gBAAkB,SAACC,GACf,OAAO,SAAC5Y,GACJA,EAAEyL,iBACF,EAAK3L,MAAMoZ,aAAaN,K,uDAItB,IAAD,OAEL,OACI,8BACI,qBAAKvT,UAAU,mBAAf,SACKD,KAAKtF,MAAM8Z,SAAS9J,KAAI,SAAC8I,EAAMrV,GAC5B,IAAM0W,EAAe,EAAKna,MAAMuM,aAAauM,GACvCsB,EAAa,EAAKpa,MAAMqa,SAASvB,GACvC,OACI,uBAAMvT,UAAU,MAAhB,UACI,cAAC,GAAD,CAASuT,KAAMA,EACXnB,KAAMwC,IAAiBrB,EAAO,GAAKqB,EACnCC,WAAYA,IAChB,mBAAG7U,UAAU,OAAOgV,YAAa1B,GAAgBC,EAAM,GAAvD,SACI,cAAC,IAAD,CAAiB/S,KAAMyU,IAAQpH,KAAK,KAAKpG,MAAM,gBAL5BvJ,c,GAlB7B0B,IAAMkB,eAmC1BuU,G,uKACQ,IAAD,OAEDC,EAAe,GACfvV,KAAKtF,MAAM2X,OACXkD,EAAe,sBAAMpV,MAAO,CAAEqV,WAAY,QAA3B,SACV,KAAOxV,KAAKtF,MAAM2X,KAAO,OAIlC,IAAIoD,EAAkB,GAClBC,EAAmB,GAEvB,GAAI1V,KAAKtF,MAAMoa,WAAY,CACvB,GAAI9U,KAAKtF,MAAMoa,WAAW1C,QAAS,CAC/B,IAAIuD,EAAe3V,KAAKtF,MAAMoa,WAAW1C,QAAQ/C,QAAO,SAACgD,GACrD,OAAOA,IAAS,EAAK3X,MAAM2X,QAE3BsD,EAAaxT,OAAS,IACtBsT,EAAkB,sBAAMtV,MAAO,CAAEyV,UAAW,UAA1B,SACb,KAAOD,EAAa9L,KAAK,KAAO,OAK7C,GAAI7J,KAAKtF,MAAMoa,WAAWe,SAAU,CAChC,IAAIC,EAAgB9V,KAAKtF,MAAMoa,WAAWe,SACtCC,EAAc3T,OAAS,IACvBuT,EAAmB,sBAAMvV,MAAO,CAAEyV,UAAW,UAA1B,SACd,KAAOE,EAAcjM,KAAK,KAAO,QAKlD,OACI,iCACI,+BAAO7J,KAAKtF,MAAM8Y,OACjB+B,EACAE,EACAC,S,GAvCK7V,IAAMkB,eA4CbkT,MCyDA8B,OArOf,YAAuF,IAAlEC,EAAiE,EAAjEA,YAAaC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,mBAAqB,EAE5CtW,IAAM2E,UAAS,GAF6B,mBAE3EhD,EAF2E,KAE9D4U,EAF8D,OAGxDvW,IAAM2E,SAASyR,GAHyC,mBAG3EnX,EAH2E,KAGpEuX,EAHoE,OAIlDxW,IAAM2E,SAAS0R,GAJmC,mBAI3EI,EAJ2E,KAIjEC,EAJiE,OAMlD1W,IAAM2E,SAAS,IANmC,mBAM3EuQ,EAN2E,KAMjEyB,EANiE,OAQhD3W,IAAM2E,SAAS,IARiC,mBAQ3EuB,EAR2E,KAQhE0Q,EARgE,OAS9C5W,IAAM2E,SAAS,GAT+B,mBAS3EkS,EAT2E,KAS/DC,EAT+D,OAUxC9W,IAAM2E,UAAS,GAVyB,mBAU3EoS,EAV2E,KAU5DC,EAV4D,OAW5ChX,IAAM2E,SACxC2R,EAAoBW,cAAYC,OAAOZ,GAAsBW,cAAYE,kBAAkBC,eAAaC,eAAelB,KAZzC,mBAW3E7S,EAX2E,KAW9DmB,EAX8D,KA0BlFzE,IAAM+E,WAAU,WACZ,IAAMuS,EAAc,GACpBb,EAASc,SAAQ,SAACjK,GACd,IAAIkK,EAAWC,OAAOnK,EAAIpS,OAAOsC,QAAQ,MAAO,KAC5CgV,EAAOlF,EAAIkF,KACXD,EAAUjF,EAAIiF,QAClB+E,EAAYE,GAAYF,EAAYE,IAAa,GAE7CjF,GACA+E,EAAYE,GAAUjF,QAAU+E,EAAYE,GAAUjF,SAAW,GACjE+E,EAAYE,GAAUjF,QAAQmF,KAAKlF,KAEnC8E,EAAYE,GAAUxB,SAAWsB,EAAYE,GAAUxB,UAAY,GACnEsB,EAAYE,GAAUxB,SAAS0B,KAAKlF,OAI5CmE,EAAYW,KACb,CAACb,IAEJ,IAAMrP,EAAepH,IAAM4N,aAAY,SAACtJ,GAEhC,IAAMqT,EAAgB,GACtBC,OAAO1S,KAAKgQ,GAAUqC,SAClB,SAAC5D,GACG,IAAMkE,EAAQ3C,EAASvB,GAEnBkE,EAAMtF,UACNoF,EAAchE,GAAQkE,EAAMtF,QAAQsF,EAAMtF,QAAQjQ,OAAS,OAUvE,IACMwV,EAAmBF,OAAO1S,KAAKyS,GAAe9M,KALpD,SAAsBkN,GAClB,OAAOA,EAAOva,QAAQ,sBAAuB,WAIqBwM,KAAK,KAWrEgO,EAAS,IAAItR,OAAO,eAAiBoR,EAAmB,eAZ9C,KAuBhB,OAVoBxT,EAAS9G,QAAQwa,GACjC,SAACvR,EAAOwR,EAAIC,EAAIC,GAEZ,IAAI3F,EAAOmF,EAAcO,GAIzB,OAHK1F,IACDA,EAAO,IAEJyF,EAAKzF,EAAO2F,OAKjC,CAACjD,IA0DH,SAASkD,IACLpB,GAAkBD,GAwBtB,IACMsB,EAAc,CACpB,cAAC7T,EAAD,CACIlB,YAAaA,EACbmB,eAAgBA,EAChB2C,aAAcA,EACdnI,MAAOA,EACP0G,SApFJ,SAAsB2S,GAEI,KAAlBA,EAAOC,QACP3B,EAAavS,EAAgBiU,EAAOC,QAAQnU,MAAM,EAFrC,GAEkD4F,KAAK,OAiFhDrI,YAAaA,IACzC,cAAC,GAAD,CACInF,KAAMia,EACNvH,QAASwH,KAGb,OAEI,qBAAKtW,UAAU,qBAAf,SACI,sBAAKA,UAAU,uBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CACIuB,YAAaA,EACbC,cArGpB,WACI2U,GAAgB5U,IAqGA1C,MAAOA,EAAOyC,cA3FlC,SAA2B3G,GACvByb,EAASxX,WAAWjE,EAAE2E,OAAOxE,SA2Fb2D,cAhEpB,SAA2B2Z,GACvB,OAAO,kBAAMhC,EAASgC,KAgEN1W,WA1FpB,WAEI,IAAM2W,EAAsB,GACtBC,EAAepV,EAAYM,oBACjC8U,EAAazT,cAAcsS,SAAQ,SAACoB,EAAOxT,INqR7B,SAACyT,EAAOjV,EAAcxI,GAGxC,IAFA,IACI0d,EAAU/U,EADRqD,EAAOxD,EAAaQ,UAEe,QAAjC0U,EAAWD,EAAME,KAAK3R,KAG1BhM,EAFA2I,EAAQ+U,EAAShL,MACX/J,EAAQ+U,EAAS,GAAGvW,QMzRtByW,CAAc,OAAQJ,GAAO,SAACK,EAAcC,GACxC,IAAM/S,EAAYgT,iBAAeC,YAAYhU,GAAKiU,MAAM,CAACJ,eAAcC,gBACvER,EAAoBf,KAAKxR,SAIjC,IAAImT,EAAkBX,EAGtBD,EAAoBa,UAAU/B,SAAQ,SAAArR,GAClCmT,EAAkBE,WAASC,YAAYH,EAAiBnT,EAAW,QAGvEzB,EAAewS,cAAYE,kBAAkBkC,KAyE7B1a,aArEpB,SAA0B8a,GACtB,OAAO,kBAAMhV,EAAewS,cAAYE,kBAAkBC,eAAaC,eAAeoC,OAqEtEzX,OAhEpB,WAEI,MAAO,CACH/C,MAAOA,EACPkI,KAAM7D,EAAYM,oBAAoB8V,aAAa,MACnDpW,YAAaA,EAAYqW,OACzBlD,SAAUA,EACV9U,YAAaA,IA0DDhC,aAzLpB,SAA0Bia,GACtB,IAAM3X,EAAW2X,EAAc,GAC/BrD,EAAetU,EAASN,aACxB6U,EAASvU,EAAShD,OAClByX,EAAYzU,EAASwU,UAErBhS,EACIxC,EAASqB,YAAa2T,cAAYC,OAAOjV,EAASqB,aAClD2T,cAAYE,kBAAkBC,eAAaC,eAAepV,EAASkF,SAkLvD/D,gBAAiBgV,OAIzB,qBAAKhY,UAAW,mBAAqB2W,EAAgB,GAAK,aAA1D,SACI,cAAC,GAAD,CAAepD,KAAMzN,EAAW+N,aAvDhD,SAA0BN,GAEtB,GAAItO,SAASwO,cAAczT,UAAUqG,MAAM,8BAA+B,CAAC,IAAD,EAEXpD,EAAiBC,GAApEY,EAF8D,EAE9DA,aAAcJ,EAFgD,EAEhDA,MAAOL,EAFyC,EAEzCA,UAAWF,EAF8B,EAE9BA,eAElCsW,EAAiB3V,EAAauC,MAAM,QAAQ,GAC5CqT,EAAShW,EAAQ6P,EAAKrR,OAASuX,EAAevX,OAE9CyX,EAAoBb,iBAAeC,YAAY1V,GAAW2V,MAAM,CAClEJ,aAAclV,EACdmV,YAAaa,IAGXE,EAAaT,WAASC,YAAYlW,EAAYM,oBAAqBL,EAAgBoQ,EAAOkG,GAC1FnU,EAAiBuR,cAAYS,KAAKpU,EAAa0W,EAAY,qBAC3DC,EAAuBhD,cAAYiD,eAAexU,EAAgBqU,GAExEtV,EAAewV,KAqCyD/E,SAAUA,EAAU9N,aAAcA,EAC9FnE,OAAQmV,MAEhB,qBAAKhY,UAAU,iBAAf,SACI,qBAAKA,UAAU,OAAf,SACI,6BAtCP,CAAC,UAAW,iBAuCKyK,KAAI,SAACsP,EAAK7b,GACZ,OACI,oBAAY8B,UAAWyW,IAAevY,EAAI,YAAc,GAAxD,SAA6D,mBAAImC,SArExE2Z,EAqEiG9b,EApE/G,kBAAMwY,EAAcsD,KAoE8D,SAAkCD,KAAtF7b,GArEzC,IAAyB8b,WA4Eb,qBAAKha,UAAU,iBAAf,SACKiY,EAAYxB,WC1N3BwD,I,cAAcC,QACW,cAA7BnU,OAAOoU,SAASC,UAEe,UAA7BrU,OAAOoU,SAASC,UAEhBrU,OAAOoU,SAASC,SAAS/T,MACvB,4DAsCN,SAASgU,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTve,MAAK,SAAA4e,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1f,QACfqf,UAAUC,cAAcO,YAI1B/f,QAAQC,IACN,iHAKEqf,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB1f,QAAQC,IAAI,sCAGRqf,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAvQ,GACL3P,QAAQ2P,MAAM,4CAA6CA,M,4BCxD7D/I,G,qBACJ,IAEMG,aAAaoZ,QAAQ,qBACvBvZ,GAAWzC,KAAKC,MAAM2C,aAAaoZ,QAAQ,oBAAoB,IAIjE,MAAOjZ,IACP,GAAiB,kBAAbA,GAAIC,KAGN,MAAMD,GAFNlH,QAAQC,IAAI,sGAQhBmgB,KAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,iBAOf,IAAMzF,GAAW,sBAAGlU,UAAH,cAAG,GAAUkF,YAAb,UAAqB,2bAIhCiP,GAAY,sBAAGnU,UAAH,cAAG,GAAUhD,aAAb,UAAsB,QACpCoX,GAAe,sBAAGpU,UAAH,cAAG,GAAUwU,gBAAb,UA1DD,CAAC,CACjBlE,SAAS,EACTrX,MAAO,gBACPsX,KAAM,SACL,CACDD,SAAS,EACTrX,MAAO,QACPsX,KAAM,OACL,CACDD,SAAS,EACTrX,MAAO,WACPsX,KAAM,SACL,CACDD,SAAS,EACTrX,MAAO,QACPsX,KAAM,MACL,CACDD,SAAS,EACTrX,MAAO,cACPsX,KAAM,WAwCF8D,GAAkB,sBAAGrU,UAAH,cAAG,GAAUqB,mBAAb,eAA4BiJ,EAGhDtF,MAAM4U,QAAQxF,GAAgB,MAChCA,GAAkBA,GAAgBxL,KAAI,SAACyC,GACrC,MAAO,CACLiF,QAASjF,EAAI,GACbpS,MAAOoS,EAAI,GACXkF,KAAMlF,EAAI,QAKhBwO,IAASlN,OACP,qCACE,qBAAKxO,UAAU,UAAUU,GAAG,QAA5B,SACE,cAAC,GAAD,CAAWuV,gBAAiBA,GAAiBF,YAAaA,GAAaC,aAAcA,GAAcE,mBAAoBA,OAEzH,sBAAKlW,UAAU,YAAYU,GAAG,SAA9B,UACE,mEACO,mBAAGG,KAAK,+CAAR,mBADP,QAES,mBAAGA,KAAK,8CAAR,6BAET,qJACA,sHAAwF,mBAAGA,KAAK,qDAAR,kBAAxF,kBACA,0EAGFoE,SAAS0W,eAAe,SAS5B,WAEE,IAAMC,EAAK,IAAI7I,eACf6I,EAAGzH,mBAAqB,WACtB,GAAIyH,EAAGxH,aAAerB,eAAe8I,KAAM,CACzC,IAAI9R,EAAS6R,EAAG7R,OAGhB,GAAKA,GAAU,KAAOA,EAAS,IAAM,CAEnC,IAAMiC,EAAQ5M,KAAKC,MAAMuc,EAAG3I,UAAU6I,MACtC7gB,QAAQC,IAAI,yCAA2C8Q,EAAQ,gBAG/D/Q,QAAQC,IAAI,uDAIlB0gB,EAAG1I,KAAK,OAAQ,8EAA8E,GAC9F0I,EAAGxI,OA1BL2I,GDjFO,SAAkBxB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwB,IAAIC,IAAwBlW,OAAOoU,SAAStZ,MACpDqb,SAAWnW,OAAOoU,SAAS+B,OAIvC,OAGFnW,OAAOoW,iBAAiB,QAAQ,WAC9B,IAAM7B,EAAK,UAAM2B,IAAN,sBAEPhC,KAgEV,SAAiCK,EAAOC,GAEtC6B,MAAM9B,EAAO,CACXpJ,QAAS,CAAE,iBAAkB,YAE5BnV,MAAK,SAAAkX,GAEJ,IAAMoJ,EAAcpJ,EAAS/B,QAAQ9J,IAAI,gBAEnB,MAApB6L,EAASlJ,QACO,MAAfsS,IAA8D,IAAvCA,EAAYrP,QAAQ,cAG5CwN,UAAUC,cAAc6B,MAAMvgB,MAAK,SAAA4e,GACjCA,EAAa4B,aAAaxgB,MAAK,WAC7BgK,OAAOoU,SAASqC,eAKpBnC,GAAgBC,EAAOC,MAG1BY,OAAM,WACLlgB,QAAQC,IACN,oEAvFAuhB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMvgB,MAAK,WACjCd,QAAQC,IACN,iHAMJmf,GAAgBC,EAAOC,OC0D/BE,K","file":"static/js/main.b3a944a8.chunk.js","sourcesContent":["import React from \"react\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\"\n\nconst pdfjs = require('@ckhordiasma/pdfjs-dist');\nconst pdfjsWorker = require('@ckhordiasma/pdfjs-dist/build/pdf.worker.entry');\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\n//PDF import\nclass ImportTools extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.fileInputRef = React.createRef();\n        this.state = {\n            type: 'none',\n            hovering: false,\n        }\n    }\n\n    importFile = (e) => {\n        if (!this.fileInputRef.current.value) {\n            console.log('no file picked');\n            return;\n        } else {\n            let callback = (file) => { console.log(file) };\n            if (this.state.type === 'PDF') {\n                callback = this.getDataFromPDF;\n            } else if (this.state.type === 'JSON') {\n                callback = this.getDataFromJSON;\n            }\n            //return Promise.resolve(this.fileInputRef.current.files[0]).then(callback).then(() => {\n            //    this.fileInputRef.current.value = ''});\n            callback(this.fileInputRef.current.files[0]);\n            this.fileInputRef.current.value = '';\n        }\n    }\n    inputClick = (importType) => {\n        return () => {\n            this.setState({\n                type: importType,\n            });\n            this.fileInputRef.current.click();\n        };\n    }\n    getDataFromPDF = (file) => {\n        const { pullBullets, getPageInfo } = getBulletsFromPdf(file);\n        //note: these promises are PDFJS promises, not ES promises\n\n        //was not able to call this (this.props.onTextUpdate) inside the \"then\" scope, so I const'ed them out\n        const textUpdater = this.props.onTextUpdate;\n        const widthUpdater = this.props.onWidthUpdate;\n\n        Promise.all([pullBullets, getPageInfo]).then(([bulletsHTML, pageData]) => {\n            widthUpdater(parseFloat(pageData.width))();\n\n            // This is needed to convert the bullets HTML into normal text. It gets rid of things like &amp;\n            const bullets =\n                new DOMParser().parseFromString(bulletsHTML, 'text/html').documentElement.textContent;\n            textUpdater(bullets)();\n        });\n\n    }\n    getDataFromJSON = (file) => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n\n            const data = JSON.parse(e.target.result);\n\n            this.props.onJSONImport(data);\n        };\n        reader.readAsText(file)\n    }\n\n    hoverOut = () => {\n        this.setState({ hovering: false });\n    }\n    toggleMenu = () => {\n        const current = this.state.hovering;\n        this.setState({ hovering: !current });\n    }\n    render() {\n        const menuState = this.state.hovering ? \"is-active\" : \"\";\n        return (\n            <div className={\"dropdown \" + menuState}>\n                <input type=\"file\" onChange={this.importFile} style={{ display: \"none\" }} ref={this.fileInputRef}></input>\n                <div className=\"dropdown-trigger\">\n                    <div className=\"buttons has-addons\">\n                        <button className=\"button\" onClick={this.inputClick('PDF')}>Import</button>\n                        <button className=\"button\" onClick={this.toggleMenu} aria-haspopup=\"true\" aria-controls=\"import-menu\" >\n                            <span className=\"icon\">\n\n                                <FontAwesomeIcon icon={faAngleDown} />\n                            </span>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"dropdown-menu\" id=\"import-menu\" role=\"menu\" onMouseLeave={this.hoverOut}>\n                    <div className=\"dropdown-content\">\n                        <a href=\"?#\" className=\"dropdown-item\" onClick={this.inputClick('PDF')}>PDF</a>\n                        <a href=\"?#\" className=\"dropdown-item\" onClick={this.inputClick('JSON')}>JSON</a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n// form width, space optimization, select text\nclass OutputTools extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    render() {\n        const widthAWD = 202.321;\n        const widthEPR = 202.321;\n        const widthOPR = 201.041;\n        return (\n            <div className=\"field is-grouped\">\n                {/* if I want to group things together in a field, each subelement must have the control class name */}\n                <div className=\"control field has-addons\">\n                    <div className=\"control has-icons-right\">\n                        <input className=\"input\" id=\"widthInput\" type='number' min=\"100\" max=\"500\" step=\".001\" value={this.props.width} onChange={this.props.onWidthChange}></input>\n                        <span className='icon is-right'>mm</span>\n                    </div>\n                    <div className=\"control buttons has-addons\">\n                        <a  className={\"button is-primary \"  + (this.props.width === widthAWD ? '' : 'is-outlined')}\n                            onClick={this.props.onWidthUpdate(widthAWD)}>AWD</a>\n                        <a className={\"button is-success \"  + (this.props.width === widthEPR ? '' : 'is-outlined')}\n                            onClick={this.props.onWidthUpdate(widthEPR)}>EPR</a>\n                        <a  className={\"button is-link \" + (this.props.width === widthOPR ? '' : 'is-outlined')}\n                            onClick={this.props.onWidthUpdate(widthOPR)}>OPR</a>\n                    </div>\n\n                </div>\n\n                <a  className={\"control button is-dark\" + (this.props.enableOptim ? '' : \"is-outlined\")}\n                    onClick={this.props.onOptimChange} id=\"enableOptim\">Auto-Space</a>\n            </div>\n        );\n    }\n}\n// normalize spaces\nclass InputTools extends React.PureComponent {\n\n    render() {\n        return (\n            <button className=\"button\" onClick={this.props.onTextNorm}>Renormalize Input Spacing</button>\n        );\n    }\n}\n// saving settings\nclass SaveTools extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.exportRef = React.createRef();\n        this.state = { hovering: false };\n    }\n    onSave = () => {\n        const settings = this.props.onSave();\n        //JSON stringifying an array for future growth\n        const storedData = JSON.stringify([settings]);\n        try {\n            localStorage.setItem('bullet-settings', storedData);\n            console.log(\"saved settings/data to local storage with character length \" + storedData.length);\n        } catch (err) {\n            if (err.name === 'SecurityError') {\n                alert(\"Sorry, saving to cookies does not work using the file:// interface and/or your browser's privacy settings\")\n            } else {\n                throw err;\n            }\n        }\n    }\n    onExport = () => {\n        const settings = this.props.onSave();\n        //JSON stringifying an array for future growth\n        const storedData = JSON.stringify([settings]);\n        const dataURI = 'data:application/JSON;charset=utf-8,' + encodeURIComponent(storedData);\n        this.exportRef.current.href = dataURI;\n        this.exportRef.current.click();\n        console.log(\"exported settings/data to local storage with character length \" + storedData.length);\n\n    }\n    hoverOut = () => {\n        this.setState({ hovering: false });\n    }\n    toggleMenu = () => {\n        const current = this.state.hovering;\n        this.setState({ hovering: !current });\n    }\n    render() {\n        const menuState = this.state.hovering ? \"is-active\" : \"\";\n        return (\n            <div className={'dropdown ' + menuState}>\n                <div className=\"dropdown-trigger\">\n                    <div className=\"buttons has-addons\">\n                        <button className=\"button\" onClick={this.onSave}>Save </button>\n                        <button className=\"button\" aria-haspopup=\"true\" aria-controls=\"save-menu\" >\n                            <span className=\"icon\" onClick={this.toggleMenu} >\n                                <FontAwesomeIcon icon={faAngleDown} />\n                            </span>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"dropdown-menu\" id=\"save-menu\" role=\"menu\" onMouseLeave={this.hoverOut}>\n                    <div className=\"dropdown-content\">\n                        <a href=\"?#\" className=\"dropdown-item\" onClick={this.onSave}>Cookie</a>\n                        <a href=\"?#\" className=\"dropdown-item\" onClick={this.onExport}>JSON</a>\n                    </div>\n                </div>\n\n                <a href=\"?#\" style={{ display: \"none\" }} download='settings.json' ref={this.exportRef}></a>\n            </div>\n        );\n    }\n}\nclass Logo extends React.PureComponent {\n    render() {\n        return (\n            <h1 className='title'><span className=\"logo\">AF </span>\n                <span className=\"logo\">Bull</span>et\n                <span className=\"logo\"> Sh</span>aping &amp;\n                <span className=\"logo\"> i</span>teration\n                <span className=\"logo\"> t</span>ool\n            </h1>\n        );\n    }\n}\nclass ThesaurusTools extends React.PureComponent {\n    render() {\n        return (\n            <a  className=\"button\" onClick={this.props.onHide} aria-haspopup=\"true\" aria-controls=\"thesaurus-menu\" >\n                <span>Thesaurus</span><span className=\"icon\"  >\n                    <FontAwesomeIcon icon={faAngleDown} />\n                </span>\n            </a>\n        );\n    }\n}\nclass DocumentTools extends React.PureComponent {\n    render() {\n        return (\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-start\">\n                    <div className=\"navbar-item\">\n                        <SaveTools onSave={this.props.onSave} />\n                    </div>\n                    <div className=\"navbar-item\">\n                        <ImportTools onJSONImport={this.props.onJSONImport} onTextUpdate={this.props.onTextUpdate} onWidthUpdate={this.props.onWidthUpdate} />\n                    </div>\n                    <div className=\"navbar-item\">\n                        <OutputTools\n                            enableOptim={this.props.enableOptim} onOptimChange={this.props.onOptimChange}\n                            width={this.props.width} onWidthChange={this.props.onWidthChange}\n                            onWidthUpdate={this.props.onWidthUpdate} />\n                    </div>\n                    <div className=\"navbar-item\">\n                        <InputTools onTextNorm={this.props.onTextNorm} />\n                    </div>\n                    <div className=\"navbar-item\">\n                        <ThesaurusTools onHide={this.props.onThesaurusHide} />\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\n// could not do a static class property because of MS edge\nconst Forms = {\n    all: {\n        'AF707': {\n            'fields': ['S2DutyTitleDesc', 'S4Assessment', 'S5Assessment', 'S6Assessment'],\n            'likelyWidth': '201.041mm'\n        },\n        'AF1206': {\n            'fields': ['specificAccomplishments', 'p2SpecificAccomplishments'],\n            'likelyWidth': '202.321mm'\n        },\n        'AF910': {\n            'fields': ['KeyDuties', 'IIIComments', 'IVComments', 'VComments', 'VIIIComments', 'IXComments'],\n            'likelyWidth': '202.321mm'\n        },\n        'AF911': {\n            'fields': ['KeyDuties', 'IIIComments', 'IVComments', 'VIIComments', 'VIIIComments', 'IXComments'],\n            'likelyWidth': '202.321mm'\n        },\n    }\n};\nfunction getBulletsFromPdf(filedata) {\n\n\n    const pdfSetup = filedata.arrayBuffer().then(function (buffer) {\n        const uint8Array = new Uint8Array(buffer);\n\n        return pdfjs.getDocument({ data: uint8Array }).promise;\n\n    });\n\n    const getXFA = pdfSetup.then(function (pdf) {\n        return pdf.getXFA();\n    });\n\n    const getFormName = pdfSetup.then(function (pdf) {\n        return pdf.getMetadata().then(function (result) {\n            const prefix = result.info.Custom[\"Short Title - Prefix\"];\n            const num = result.info.Custom[\"Short Title - Number\"];\n            return prefix + '' + num;\n        })\n    });\n    const getAllData = Promise.all([getFormName, getXFA]);\n    const pullBullets = getAllData.then(function (results) {\n\n        const formName = results[0];\n        const xfaDict = results[1];\n\n        let datasetXML = xfaDict['datasets'];\n        datasetXML = datasetXML.replace(/&#xD;/g, '\\n');\n\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(datasetXML, \"text/xml\");\n\n        let bulletText = '';\n        for (let tagName of Forms.all[formName]['fields']) {\n            const bulletTag = xmlDoc.querySelector(tagName);\n            bulletText += bulletTag.innerHTML + '\\n';\n        }\n        return bulletText;\n    });\n\n    const getPageInfo = getAllData.then(function (results) {\n\n        const formName = results[0];\n        const xfaDict = results[1];\n\n        const templateXML = xfaDict['template'];\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(templateXML, \"text/xml\");\n\n        let fonts = [];\n        let fontSizes = []\n        let widths = [];\n        let i = 0;\n        for (let tagName of Forms.all[formName]['fields']) {\n            const bulletTag = xmlDoc.querySelector(\"field[name='\" + tagName + \"'\");\n            fonts[i] = bulletTag.querySelector('font').getAttribute('typeface');\n            fontSizes[i] = bulletTag.querySelector('font').getAttribute('size');\n            widths[i] = bulletTag.getAttribute('w');\n            i += 1;\n        }\n        for (let font of fonts) {\n            if (font !== fonts[0]) {\n                console.log('warning: not all grabbed sections have the same font type');\n                break;\n            }\n        }\n        for (let fontSize of fontSizes) {\n            if (fontSize !== fontSizes[0]) {\n                console.log('warning: not all grabbed sections have the same font size');\n                break;\n            }\n        }\n        for (let width of widths) {\n            if (width !== widths[0]) {\n                console.log('warning: not all grabbed sections have the same width');\n                break;\n            }\n        }\n\n        return { 'font': fonts[0], 'fontSize': fontSizes[0], 'width': widths[0] }\n\n        //accomplishmentsTag = templateXML.match(/name=\"specificAccomplishments\"(.*?)<\\/field/);\n        //console.log(accomplishmentsTag)\n    });\n    return { pullBullets, getPageInfo };\n}\n\nfunction getSelectionInfo(editorState) {\n    // this block of code gets the selected text from the editor.\n    const selectionState = editorState.getSelection();\n    const anchorKey = selectionState.getAnchorKey();\n    const contentBlock = editorState.getCurrentContent().getBlockForKey(anchorKey);\n    const start = selectionState.getStartOffset();\n    const end = selectionState.getEndOffset();\n    const selectedText = contentBlock.getText().slice(start, end);\n    return {\n        selectionState,\n        anchorKey,\n        contentBlock,\n        start,\n        end,\n        selectedText,\n    }\n}\n\nconst findWithRegex = (regex, contentBlock, callback) => {\n    const text = contentBlock.getText();\n    let matchArr, start, end;\n    while ((matchArr = regex.exec(text)) !== null) {\n        start = matchArr.index;\n        end = start + matchArr[0].length;\n        callback(start, end);\n    }\n};\n\nexport { Logo, DocumentTools, getSelectionInfo, findWithRegex };","import React from \"react\"\nimport { Editor,  RichUtils } from \"draft-js\"\nimport \"draft-js/dist/Draft.css\";\nimport { getSelectionInfo } from './tools.js'\nconst DPI = 96;\nconst MM_PER_IN = 25.4;\nconst DPMM = DPI / MM_PER_IN;\n\n\n// optimization status codes\n// status codes for optimization direction \n// had to move this to a floating object because MS Edge doesn't support static variables\nconst BULLET = {\n    OPTIMIZED: 0,\n    FAILED_OPT: 1,\n    NOT_OPT: -1,\n    ADD_SPACE: 1,\n    REM_SPACE: -1,\n    MAX_UNDERFLOW: -4,\n    Tokenize: (sentence) => {\n        return sentence.split(/[\\s]+/);\n    },\n}\n\n\nfunction BulletComparator({ editorState, setEditorState, width, ...props }) {\n    \n    const bulletOutputID = \"bulletOutput\";\n    const [heightMap, setHeightMap] = React.useState(new Map());\n    // Editor callback that adds rich text editor keybinds\n    const handleKeyCommand = (command, editorState) => {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            setEditorState(newState);\n            return 'handled';\n        }\n        return 'not-handled';\n    }\n\n    // Editor callback that runs whenever edits or selection changes occur.\n    const onChange = (newEditorState) => {\n\n        \n\n        //const content = editorState.getCurrentContent();\n        // ordered map has a key and a block associasted with it\n        //const blockMap = content.getBlockMap();\n        /*\n        for(let [key,block] of blockMap){\n            console.log(block.getText());\n        }\n        */\n        const { selectedText } = getSelectionInfo(newEditorState)\n        if (props.onSelect && selectedText !== '') props.onSelect(selectedText);\n        \n        setEditorState(newEditorState);\n    }\n\n    // This other bullet selection is for when things are selected on the optimized output\n    const onBulletSelect = (event) => {\n        const selection = window.getSelection().toString();\n        if (selection !== \"\") {\n            props.onSelect(selection)\n        }\n    }\n\n    // control-a selectability on bullet outputs\n    function selectOutput(e) {\n        if (e.ctrlKey && e.keyCode === 65) {\n            e.preventDefault();\n            //console.log('control-a')\n            //console.log(this.outputRef.current)\n            if (e.target.id.match(new RegExp(bulletOutputID))) {\n                const range = document.createRange();\n                range.selectNode(e.target);\n                window.getSelection().removeAllRanges();\n                window.getSelection().addRange(range);\n            }\n        }\n    }\n\n    React.useEffect(()=>{\n        let newHeightMap = new Map();\n        for(let key of editorState.getCurrentContent().getBlockMap().keys()){\n            const blockDiv = document.querySelector(`div[data-offset-key=\"${key}-0-0\"]`);\n            if(blockDiv) newHeightMap.set(key, blockDiv.getBoundingClientRect().height);\n        };\n        setHeightMap(newHeightMap);\n    },[editorState])\n\n    return (\n        <div className=\"bullets columns is-multiline\" >\n            <div className=\"column\" style={{\n                width: width + 'mm',\n            }}>\n                <h2 className='subtitle'>Input Bullets Here:</h2>\n                <div className=\"border\" style={{ maxWidth: (width+1) + 'mm' }}>\n                    <Editor \n                        editorState={editorState} onChange={onChange} handleKeyCommand={handleKeyCommand} />\n                </div>\n            </div>\n            <div className=\"column\" >\n                <h2 className='subtitle'>View Output Here:</h2>\n                <div className=\"border\" id={bulletOutputID} style={{ width: (width+1) + 'mm' }}\n                    onMouseUp={onBulletSelect} onKeyDown={selectOutput} tabIndex=\"0\">\n                    {Array.from(editorState.getCurrentContent().getBlockMap(), ([key, block]) => {\n                        let text = block.getText();\n                        if (props.abbrReplacer) text = props.abbrReplacer(text);\n                        \n                        return <Bullet key={key} text={text} widthPx={width * DPMM} height={heightMap.get(key)} \n                            enableOptim={props.enableOptim} />\n                    })}\n                </div>\n            </div>\n        </div>);\n}\n/*\n            <div>\n                {editorState.getCurrentContent().getBlocksAsArray().map((block, key)=>{\n                    return <Bullet text={block.getText()} width={202.321*DPMM}/>\n                })}\n            </div>\n\n*/\n\n\n\n\nfunction Bullet({ text, widthPx, ...props }) {\n    const canvasRef = React.useRef(null);\n    const [outputText, setOutputText] = React.useState([' ']);\n\n    const [color, setColor] = React.useState('inherit');\n    const [loading, setLoading] = React.useState(false);\n    const [optimStatus, setOptimStatus] = React.useState(BULLET.NOT_OPT);\n    const [rendering, setBulletRendering] = React.useState({ text: '' });\n\n    const getContext = (canvas) => {\n        //now we can draw in 2d here.\n        const context = canvas.getContext('2d');\n        context.font = '12pt Times New Roman';\n        context.textAlign = 'left';\n        return context;\n    }\n\n    // This effect updates the text rendering (i.e. enforces width constraints by inserting newlines)\n    //   whenever the props text input is updated.\n    React.useEffect(() => {\n \n        const context = getContext(canvasRef.current)\n        setBulletRendering(renderBulletText(text, context, widthPx));\n\n    }, [text, widthPx, props.enableOptim]);\n    // [] indicates that this happens once after the component mounts.\n    // [props.text] indicates that this happens every time the text changes from the user\n\n    // This effect happens after bullet rendering changes. It evaluates the rendered bullet and\n    //  sees how it can be improved with modified spaces. \n    React.useEffect(() => {\n\n        setLoading(true);\n        setOutputText(rendering.text);\n        if (props.enableOptim) {\n            const optimizer = (txt) => renderBulletText(txt, getContext(canvasRef.current), widthPx);\n            const optimResults = optimize(text, optimizer);\n            setLoading(false);\n            setOptimStatus(optimResults.status);\n            setOutputText(optimResults.rendering.text);\n            \n        } else {\n            setOutputText(rendering.text);\n            setLoading(false);\n        }\n\n    }, [rendering, props.enableOptim, text, widthPx]);\n\n    //color effect\n    React.useEffect(() => {\n        if (loading) {\n            setColor(\"silver\")\n        } else if (optimStatus === BULLET.FAILED_OPT) {\n            setColor(\"red\");\n        } else {\n            setColor(\"inherit\");\n        }\n    }, [loading, outputText, optimStatus])\n\n    // the style properties help lock the canvas in the same spot and make it essentially invisible.\n    //whitespace: pre-wrap is essential as it allows javascript string line breaks to appear properly.\n    return (\n        <>\n            <canvas\n                ref={canvasRef}\n                style={{\n                    visibility: \"hidden\",\n                    position: \"absolute\",\n                    top: \"-1000px\",\n                    left: \"-1000px\"\n                }} />\n            <div style={{\n                minHeight: props.height,\n                color: color,\n                display:'flex',\n                flexDirection:'column',\n            }} onMouseUp={props.onHighlight} >\n                {outputText.map((line)=>{\n                    return <span key={line} style={{whiteSpace:\"pre\"}}>{line}</span>;\n                })}\n            </div>\n        </>\n    );\n    //return canvas;\n}\n\n\nfunction optimize(sentence, evalFcn) {\n\n    const smallerSpace = \"\\u2006\";\n    const largerSpace = \"\\u2004\";\n\n    //initialization of optimized words array\n    let optWords = BULLET.Tokenize(sentence);\n\n    const initResults = evalFcn(sentence);\n\n    if (initResults.overflow === 0) {\n        return initResults;\n    }\n\n    //initial instantiation of previousResults\n    let prevResults = initResults;\n    let finalResults = initResults;\n    const newSpace = (initResults.overflow >= 0) ? smallerSpace : largerSpace;\n\n    let finalOptimStatus = BULLET.NOT_OPT;\n\n    function hashCode (str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n          chr = str.charCodeAt(i);\n          hash = ((hash << 5) - hash) + chr;\n          hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n      };\n\n    function getRandomInt(seed, max) {\n        return Math.floor(Math.abs((Math.floor(9 * hashCode(seed) + 5) % 100000) / 100000) * Math.floor(max));\n    }\n\n\n    while (finalResults.overflow > 0 || finalResults.overflow < BULLET.MAX_UNDERFLOW) {\n        //don't select the first space after the dash- that would be noticeable and look wierd.\n        // also don't select the last word, don't want to add a space after that.\n        let iReplace = getRandomInt(optWords.join(''), optWords.length - 1 - 1) + 1;\n\n        //merges two elements together, joined by the space\n        optWords.splice(\n            iReplace, 2,\n            optWords.slice(iReplace, iReplace + 2).join(newSpace)\n        );\n\n        //make all other spaces the normal space size\n        let newSentence = optWords.join(' ');\n\n        let newResults = evalFcn(newSentence);\n\n        if (initResults.overflow <= 0 && newResults.overflow > 0) {\n            //console.log(\"Note: Can't add more spaces without overflow, reverting to previous\" );\n            finalResults = prevResults;\n            finalOptimStatus = BULLET.OPTIMIZED;\n            break;\n        } else if (initResults.overflow > 0 && newResults.overflow < 0) {\n            //console.log(\"Removed enough spaces. Terminating.\" );\n            finalResults = newResults;\n            finalOptimStatus = BULLET.OPTIMIZED;\n            break;\n        } else if (optWords.length <= 2) { //this conditional needs to be last\n            //console.log(\"\\tWarning: Can't replace any more spaces\");\n            finalResults = newResults;\n            finalOptimStatus = BULLET.FAILED_OPT;\n            break;\n        }\n        prevResults = newResults;\n    }\n    return {\n        status: finalOptimStatus,\n        rendering: finalResults,\n    };\n}\n\n// all widths in this function are in pixels\nfunction renderBulletText(text, context, width) {\n    // this function expects a single line of text with no line breaks.\n    if(text.match('\\n')){\n        console.error('renderBulletText expects a single line of text');\n    }\n    const getWidth = (txt) => (context.measureText(txt)).width;\n    const fullWidth = getWidth(text.trimEnd());\n\n    if (fullWidth < width) {\n        return {\n            text: [text],\n            fullWidth: fullWidth,\n            lines: 1,\n            overflow: fullWidth - width,\n        };\n    } else {\n        // Scenario where the width of the text is wider than desired.\n        //  In this case, work needs to be done to figure out where the line breaks should be. \n\n        // Regex- split after one of the following: \\s ? / | - % ! \n        // but ONLY if immediately followed by: [a-zA-z] [0-9] + \\\n        const textSplit = text.split(/(?<=[\\s?/|\\-%!])(?=[a-zA-Z0-9+\\\\])/);\n\n        // check to make sure the first token is smaller than the desired width.\n        //   This is usually true, unless the desired width is abnormally small, or the \n        //   input text is one really long word\n        if (getWidth(textSplit[0]) < width) {\n            let answerIdx = 0;\n            for (let i = 1; i <= textSplit.length; i++) {\n                const evalText = textSplit.slice(0, i).join('').trimEnd();\n                const evalWidth = getWidth(evalText);\n                if (evalWidth > width) {\n                    answerIdx = i - 1;\n                    break;\n                }\n            }\n            const recursedText = textSplit.slice(answerIdx, textSplit.length).join('');\n\n            if (recursedText === text) {\n                console.warn(\"Can't fit \\\"\" + text + \"\\\" on a single line\");\n                return {\n                    text: [text],\n                    fullWidth,\n                    lines: 1,\n                    overflow: fullWidth - width,\n                };\n            } else {\n                const recursedResult = renderBulletText(recursedText, context, width);\n\n                return {\n                    text: [textSplit.slice(0, answerIdx).join(''), ...recursedResult.text],\n                    fullWidth: fullWidth,\n                    lines: 1 + recursedResult.lines,\n                    overflow: fullWidth - width,\n                }\n            }\n\n        } else {\n\n            const avgCharWidth = fullWidth / (text.length);\n            const guessIndex = parseInt(width / avgCharWidth);\n            const firstGuessWidth = getWidth(text.substring(0, guessIndex))\n            let answerIdx = guessIndex;\n            if (firstGuessWidth > width) {\n                for (let i = guessIndex - 1; i > 0; i--) {\n                    const nextGuessWidth = getWidth(text.substring(0, i));\n                    if (nextGuessWidth < width) {\n                        answerIdx = i;\n                        break;\n                    }\n                }\n            } else if (firstGuessWidth < width) {\n                for (let i = guessIndex; i <= text.length; i++) {\n\n                    const nextGuessWidth = getWidth(text.substring(0, i));\n                    if (nextGuessWidth > width) {\n                        answerIdx = i - 1;\n                        break;\n                    }\n                }\n            }\n            const recursedText = text.substring(answerIdx, text.length);\n            if (recursedText === text) {\n                console.warn(\"Could not even fit first character of \\\"\" + text + \"\\\" on a single line\");\n                return {\n                    text: [text],\n                    fullWidth,\n                    lines: 1,\n                    overflow: fullWidth - width\n                };\n            } else {\n                const recursedResult = renderBulletText(recursedText, context, width);\n\n                return {\n                    text: [text.substring(0, answerIdx), ...recursedResult.text],\n                    fullWidth: fullWidth,\n                    lines: 1 + recursedResult.lines,\n                    overflow: fullWidth - width,\n                }\n            }\n        }\n    }\n}\n\n\nexport { Bullet, BULLET, BulletComparator, renderBulletText };","export default __webpack_public_path__ + \"static/media/abbrs.ebd0e99b.xlsx\";","import React from 'react'\nimport { useTable } from 'react-table'\nimport {\n    useGlobalFilter,\n    useFilters,\n    useSortBy,\n    useAsyncDebounce,\n    useRowSelect\n} from 'react-table/dist/react-table.development';\nimport update from 'immutability-helper'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCopy, faTrash, faCheckSquare } from \"@fortawesome/free-solid-svg-icons\"\nimport { faSquare } from \"@fortawesome/free-regular-svg-icons\"\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span>\n            Search:{' '}\n            <input className=\"input\"\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} rows...`}\n                style={{\n                    fontSize: '1.1rem',\n                    border: '0',\n                }}\n            />\n        </span>\n    )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n    column: { filterValue, setFilter },\n}) {\n\n    return (\n        <input className=\"input\"\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction BooleanFilter({\n    column: { filterValue, setFilter },\n}) {\n    // Calculate the options for filtering\n    // using the preFilteredRows\n\n    const options = React.useMemo(() => (['All', 'Enabled', 'Disabled']), []);\n    const values = React.useMemo(() => ([undefined, true, false]), []);\n\n    const currentSelection = options[values.indexOf(filterValue)]\n\n    // Render a multi-select box\n    return (\n        <div className=\"select\">\n            <select\n                value={currentSelection}\n                onChange={e => {\n                    setFilter(values[options.indexOf(e.target.value)])\n                }}\n            >\n                {options.map((text, i) => (\n                    <option key={i} value={text}>\n                        {text}\n                    </option>\n                ))}\n            </select>\n        </div>\n    )\n}\n\n\nconst SelectCheckbox = ({\n    value,\n    row,\n    column: { id },\n    updateDataAfterInput,\n}) => {\n    // We need to keep and update the state of the cell normally\n    \n    const {onChange: onSelChange, style, indeterminate, ...rowSelectProps} = \n        React.useMemo(()=>row.getToggleRowSelectedProps(),[row]);\n    \n    const onChange = React.useCallback((e) => {\n        updateDataAfterInput(row.index, id, e.target.checked);\n        onSelChange(e);\n    },[onSelChange, id, row.index, updateDataAfterInput])\n    \n    const mergedStyle = update(style, {'$merge': {display:\"none\"}})\n    return (\n        <div style={{textAlign: \"center\"}}>\n        <label className=\"icon is-large\">\n            <input type=\"checkbox\" onChange={onChange} style={mergedStyle} {...rowSelectProps} />\n            <FontAwesomeIcon size=\"2x\" icon={value? faCheckSquare : faSquare} />\n        </label>\n        </div>\n    )\n};\n\n// Create an editable cell renderer\nconst EditableCellTemplate = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateDataAfterInput,  // This is a custom function that we supplied to our table instance\n},\n    type = 'text') => {\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = React.useState(initialValue)\n\n    const onChange = e => {\n        if (type === 'checkbox') {\n            setValue(e.target.checked);\n        } else {\n            setValue(e.target.value);\n        }\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n        updateDataAfterInput(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    React.useEffect(() => {\n        setValue(initialValue)\n    }, [initialValue])\n\n\n    return <input className=\"input\" type={type} value={value} onChange={onChange} onBlur={onBlur} />;\n\n}\n\n\n\nfunction AbbrTable({ data, setData }) {\n\n    // mapping of raw data columns to something meaningful\n    const columns = React.useMemo(() => [\n        {\n            Header: \"Status\",\n            accessor: 'enabled',\n            Cell: SelectCheckbox,\n            Filter: BooleanFilter,\n            filter: 'boolean',\n            disableSortBy: true,\n        },\n        {\n            Header: \"Word\",\n            accessor: 'value',\n            Cell: EditableCellTemplate,\n        },\n        {\n            Header: 'Abbreviation',\n            accessor: 'abbr',\n            Cell: EditableCellTemplate,\n        },\n    ], []);\n\n    // When our cell renderer calls updateDataAfterInput, we'll use\n    // the rowIndex, columnId and new value to update the\n    // original data\n    const updateDataAfterInput = (rowIndex, columnId, value) => {\n        setData(oldData=>{\n            const newData =  update(oldData, {\n               [rowIndex]: {\n                   [columnId]: {$set: value}}\n            });\n            return newData;  \n        });\n    }\n\n\n    const filterTypes = React.useMemo(\n        () => ({\n            // boolean filter\n            boolean: (rows, id, filterValue) => {\n                return rows.filter(row => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? (rowValue === filterValue) : true\n                })\n            },\n        }),\n        []\n    )\n\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const appendRow = (beforeIndex) => {\n        const beforeRecord = data[beforeIndex];\n        setData(\n            update(data, {\n                $splice: [\n                    [beforeIndex + 1, 0, beforeRecord]\n                ]\n            })\n        );\n    };\n\n    const deleteRow = (beforeIndex) => {\n        setData(\n            update(data, {\n                $splice: [\n                    [beforeIndex, 1]\n                ]\n            })\n        );\n    };\n\n    // note that columns and data must be memoized !\n    const tableInstance = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            filterTypes,\n            updateDataAfterInput,\n            autoResetSelectedRows: false,\n            manualRowSelectedKey: 'enabled',\n\n        },\n        useFilters,\n        useGlobalFilter,\n        useSortBy,\n        useRowSelect,\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        visibleColumns,\n        state,\n        setGlobalFilter,\n        preGlobalFilteredRows,\n    } = tableInstance;\n\n    return (\n        <table className=\"table is-hoverable\" {...getTableProps()}>\n            <thead>\n                <tr>\n                    <th\n                        colSpan={visibleColumns.length}\n                        style={{\n                            textAlign: 'left',\n                        }}\n                    >\n                        <GlobalFilter\n                            preGlobalFilteredRows={preGlobalFilteredRows}\n                            globalFilter={state.globalFilter}\n                            setGlobalFilter={setGlobalFilter}\n                        />\n                    </th>\n                </tr>\n                {headerGroups.map(headerGroup => {\n                    return (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n\n                            {headerGroup.headers.map(column => {\n                                // taking the default header props, then adding in toggle props. can keep chaining if wanted.\n                                return (\n                                    <th {...column.getHeaderProps()}>\n                                        <div {...column.getSortByToggleProps()}> {column.render('Header')}<span>{column.isSorted ? (column.isSortedDesc ? ' v' : ' ^') : ''}</span> </div>\n                                        <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                    </th>);\n                            })}\n                            {/*this empty th is for the add delete stuff*/}\n                            <th></th><th></th>\n                        </tr>\n                    )\n                })}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map(\n                    (row, index) =>\n                        prepareRow(row) || (\n                            <Row\n                                index={index}\n                                row={row}\n                                rowOps={{ appendRow, deleteRow }}\n                                {...row.getRowProps()}\n                            />\n                        )\n                )}\n            </tbody>\n        </table>\n    );\n}\n\n\nconst Row = ({ row, index, rowOps }) => {\n\n    return (\n        <tr>\n\n            {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n            })}\n            <td>\n                <span className=\"icon is-large\" onClick={() => rowOps.appendRow(index)}>\n                    <FontAwesomeIcon icon={faCopy} size=\"2x\" />\n                </span>\n                <span className=\"icon is-large\" onClick={() => rowOps.deleteRow(index)}>\n                    <FontAwesomeIcon icon={faTrash} size=\"2x\"/>\n                </span>\n            </td>\n        </tr>\n    )\n}\n\nexport default AbbrTable;","//import React from 'react';\n//import ReactDOM from 'react-dom';\n//import { HotTable } from '@handsontable/react';\n//import Handsontable from 'handsontable';\n\nimport React from \"react\"\nimport XLSX from \"xlsx\"\nimport SampleAbbrFile from '../static/abbrs.xlsx'\nimport AbbrTable from './abbrtable.js'\n\n\nfunction AbbrTools({ data, setData, ...props}) {\n\n    const fileInputRef = React.createRef();\n    function importSampleAbbrs() {\n        return new Promise((res) => {\n            const xhttp = new XMLHttpRequest();\n            xhttp.responseType = 'blob';\n            xhttp.onload = () => {\n                res(xhttp.response);\n            }\n            xhttp.open('GET', SampleAbbrFile, true);\n            xhttp.send();\n        }).then(getDataFromXLS);\n    }\n    function importAbbrs(e) {\n\n        if (!fileInputRef.current.value) {\n            console.log('no file picked');\n            return;\n        } else {\n            getDataFromXLS(fileInputRef.current.files[0]);\n            fileInputRef.current.value = '';\n        }\n\n    }\n    function getDataFromXLS(file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = XLSX.read(data, {\n                type: 'binary',\n                raw: true,\n            });\n            const rows = XLSX.utils.sheet_to_json(\n                workbook.Sheets[workbook.SheetNames[0]],\n                { 'header': ['enabled', 'value', 'abbr'] })\n                .map(({enabled, value, abbr})=>{\n                        return {enabled, value, abbr}\n                });\n            \n            // checks first row, enabled value and see if it matches header text\n            // normally enabled is a boolean.\n            if((rows[0].enabled.toString()).match(/enabled/i)){\n                setData(rows.slice(1));\n            } else{\n                setData(rows);\n            }\n            \n        };\n        reader.readAsBinaryString(file)\n    }\n    function exportToXLS() {\n        const wb = XLSX.utils.book_new();\n        const sht = XLSX.utils.json_to_sheet(data);\n        XLSX.utils.book_append_sheet(wb, sht, 'abbrs')\n        XLSX.writeFile(wb, 'abbrs.xlsx');\n    }\n    function inputClick() {\n        fileInputRef.current.click();\n    }\n\n\n    return (\n        <div className='toolbox'>\n            <input type=\"file\" onChange={importAbbrs} ref={fileInputRef} style={{ display: \"none\" }}></input>\n            <button className=\"button\" onClick={inputClick}>Import Abbrs</button>\n            <button className=\"button\" onClick={exportToXLS}>Export Abbrs</button>\n            <button className=\"button\" onClick={() => {\n                if (window.confirm(\"Are you sure you want to remove all existing acronyms and replace with a common list?\")) {\n                    importSampleAbbrs();\n                }\n            }}>Load Common Abbrs</button>\n        </div>\n    );\n\n}\n\nfunction AbbrsViewer({ data, setData }) {\n    return (\n        <div>\n            <AbbrTools setData={setData} data={data} />\n            <AbbrTable data={data} setData={setData} />\n        </div>\n    );\n}\n\nexport default AbbrsViewer;","import React from \"react\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\n\n\nconst handleCardClick = (word, This) => {\n    return (e) => {\n        e.preventDefault();\n        if (document.activeElement === window.getSelection().anchorNode.firstChild) {\n            const ta = document.activeElement;\n            This.props.onSelReplace(ta.selectionStart, ta.selectionEnd, word);\n        }\n    }\n}\n\nclass SynonymViewer extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.state = {\n            synonyms: [],\n            hidden: true,\n        }\n    }\n    getSynonyms = (phrase) => {\n        const xhttp = new XMLHttpRequest();\n        xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\n                const dat = JSON.parse(xhttp.responseText);\n\n                if (dat.length !== 0) {\n                    this.setState({\n                        synonyms: dat.map((item) => { return item.word }),\n                    });\n                } else {\n                    this.setState({\n                        synonyms: []\n                    })\n                }\n            }\n        }\n        const maxWords = 75;\n        xhttp.open(\"GET\", \"https://api.datamuse.com/words?max=\" + maxWords + \"&ml=\" + phrase, true)\n        xhttp.send();\n    }\n    componentDidMount() {\n        this.getSynonyms(this.props.word);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.word !== this.props.word) {\n            this.getSynonyms(this.props.word);\n        }\n    }\n\n    render() {\n        const replacedWord = this.props.abbrReplacer(this.props.word);\n        const otherAbbrs = this.props.abbrDict[this.props.word];\n        const header =\n            <span className=\"tag is-medium\">\n                <Synonym word={this.props.word} key={this.props.word}\n                    abbr={replacedWord === this.props.word ? \"\" : replacedWord}\n                    otherAbbrs={otherAbbrs} />\n                <a className=\"icon is-small\" onMouseDown={handleCardClick(this.props.word, this)}>\n                    <FontAwesomeIcon icon={faPlus} size=\"xs\" color=\"#51cf66\" />\n                </a>\n            </span>;\n\n        const synonyms = <SynonymList onSelReplace={this.props.onSelReplace} key={this.state.synonyms.join('')} synonyms={this.state.synonyms} abbrDict={this.props.abbrDict} abbrReplacer={this.props.abbrReplacer} />;\n        const explanation = <span className=\"panel-block\" key='init'>Auto-thesaurus box - highlight a word or phrase below to show synonyms in this box</span>;\n        const noResults = <span className=\"panel-block\" key='none'>no results found</span>;\n        let mainBody;\n        if (this.props.word === '') {\n            mainBody = explanation;\n        } else if (this.state.synonyms.length === 0) {\n            mainBody = noResults;\n        } else {\n            mainBody = synonyms;\n        }\n\n        return (\n            <div className=\"card\">\n                <header className=\"card-header has-background-light\tis-shadowless\">\n                    <div className=\"card-header-title\" >\n                        <span >Thesaurus{this.props.word ? ':' : \"\"}</span>\n                        {this.props.word ? header : ''}\n                    </div>\n                    <a className=\"card-header-icon\" onClick={this.props.onHide}>\n                        <span className=\"delete\">\n                        </span>\n                    </a>\n                </header>\n                <div className=\"card-content\" style={{ height: \"290px\", overflow: \"auto\" }} >\n\n                    {mainBody}\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nclass SynonymList extends React.PureComponent {\n\n    handleCardClick = (word) => {\n        return (e) => {\n            e.preventDefault();\n            this.props.onSelReplace(word);\n\n        }\n    }\n    render() {\n\n        return (\n            <div>\n                <div className=\"tags are-medium \">\n                    {this.props.synonyms.map((word, i) => {\n                        const replacedWord = this.props.abbrReplacer(word);\n                        const otherAbbrs = this.props.abbrDict[word];\n                        return (\n                            <span className='tag' key={i} >\n                                <Synonym word={word}\n                                    abbr={replacedWord === word ? \"\" : replacedWord}\n                                    otherAbbrs={otherAbbrs} />\n                                <a className=\"icon\" onMouseDown={handleCardClick(word, this)}>\n                                    <FontAwesomeIcon icon={faPlus} size=\"xs\" color=\"#51cf66\" />\n                                </a>\n                            </span>\n                        )\n                    }\n                    )}\n                </div>\n            </div>\n        )\n\n    }\n}\nclass Synonym extends React.PureComponent {\n    render() {\n        //don't forget! you need to add capability to check on disabled abbreviations\n        let mainAbbrDisp = '';\n        if (this.props.abbr) {\n            mainAbbrDisp = <span style={{ fontWeight: \"bold\" }}>\n                {\" (\" + this.props.abbr + \")\"}\n            </span>;\n        }\n\n        let enabledAbbrDisp = ''\n        let disabledAbbrDisp = ''\n\n        if (this.props.otherAbbrs) {\n            if (this.props.otherAbbrs.enabled) {\n                let enabledAbbrs = this.props.otherAbbrs.enabled.filter((abbr) => {\n                    return abbr !== this.props.abbr;\n                });\n                if (enabledAbbrs.length > 0) {\n                    enabledAbbrDisp = <span style={{ fontStyle: \"italic\" }}>\n                        {\" (\" + enabledAbbrs.join(',') + \")\"}\n                    </span>\n                }\n            }\n\n            if (this.props.otherAbbrs.disabled) {\n                let disabledAbbrs = this.props.otherAbbrs.disabled;\n                if (disabledAbbrs.length > 0) {\n                    disabledAbbrDisp = <span style={{ fontStyle: \"italic\" }}>\n                        {\" (\" + disabledAbbrs.join(',') + \")\"}\n                    </span>\n                }\n            }\n        }\n        return (\n            <span>\n                <span>{this.props.word}</span>\n                {mainAbbrDisp}\n                {enabledAbbrDisp}\n                {disabledAbbrDisp}\n            </span>\n        )\n    }\n}\nexport default SynonymViewer;","import React from \"react\"\nimport { BULLET, BulletComparator } from \"./bullets.js\"\nimport { Logo, DocumentTools, getSelectionInfo, findWithRegex} from \"./tools.js\"\nimport AbbrsViewer from \"./abbrs.js\"\nimport SynonymViewer from \"./thesaurus.js\"\n// booleans for debugging\nimport { EditorState, ContentState, Modifier, SelectionState } from \"draft-js\"\n\n// Note that all width measurements in this file are in millimeters.\nfunction BulletApp({ initialText, initialWidth, initialAbbrData, initialEditorState}) {\n\n    const [enableOptim, setEnableOptim] = React.useState(true);\n    const [width, setWidth] = React.useState(initialWidth);\n    const [abbrData, setAbbrData] = React.useState(initialAbbrData);\n\n    const [abbrDict, setAbbrDict] = React.useState({});\n    \n    const [selection, setSelection] = React.useState('');\n    const [currentTab, setCurrentTab] = React.useState(0);\n    const [showThesaurus, setShowThesaurus] = React.useState(false);\n    const [editorState, setEditorState] = React.useState(\n        initialEditorState? EditorState.fromJS(initialEditorState) : EditorState.createWithContent(ContentState.createFromText(initialText)));\n\n    function handleJSONImport(settingsArray) {\n        const settings = settingsArray[0]; //preparing for possible eventual several tabs of stuff\n        setEnableOptim(settings.enableOptim);\n        setWidth(settings.width);\n        setAbbrData(settings.abbrData);\n\n        setEditorState(\n            settings.editorState? EditorState.fromJS(settings.editorState) : \n            EditorState.createWithContent(ContentState.createFromText(settings.text))\n        );\n    }\n\n    React.useEffect(() => {\n        const newAbbrDict = {};\n        abbrData.forEach((row) => {\n            let fullWord = String(row.value).replace(/\\s/g, ' ');\n            let abbr = row.abbr;\n            let enabled = row.enabled;\n            newAbbrDict[fullWord] = newAbbrDict[fullWord] || []; //initializes to empty array if necessary\n\n            if (enabled) {\n                newAbbrDict[fullWord].enabled = newAbbrDict[fullWord].enabled || [];\n                newAbbrDict[fullWord].enabled.push(abbr)\n            } else {\n                newAbbrDict[fullWord].disabled = newAbbrDict[fullWord].disabled || [];\n                newAbbrDict[fullWord].disabled.push(abbr)\n            }\n        })\n\n        setAbbrDict(newAbbrDict);\n    }, [abbrData]);\n\n    const abbrReplacer = React.useCallback((sentence) => {\n\n            const finalAbbrDict = {};\n            Object.keys(abbrDict).forEach(\n                (word) => {\n                    const abbrs = abbrDict[word]; //an array\n                    //if there is at least one enabled abbreviation, take the lowest most element of it.\n                    if (abbrs.enabled) {\n                        finalAbbrDict[word] = abbrs.enabled[abbrs.enabled.length - 1];\n                    }\n                }\n            )\n\n            // courtesy of https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex \n            function escapeRegExp(string) {\n                return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n            }\n\n            let modifiers = 'g';\n            const allApprovedAbbrs = Object.keys(finalAbbrDict).map(escapeRegExp).join('|');\n\n            // some info on the boundary parts of the regex:\n            // (^|\\\\W|\\\\b) \n            //     ^ - ensures words at the beginning of line are considered for abbreviation\n            //     \\\\W - expects abbr to be preceded by a non-word, i.e. a space, semicolon, dash, etc.\n            //     \\\\b - also check for word boundaries, this is necessary for edge cases like 'f/ ' and 'w/ '.\n            //            Otherwise things like 'with chicken' and 'for $2M' won't resolve to 'w/chicken' and 'f/$2M'.\n            // (\\\\W|\\\\b|$)\n            //     \\\\W, \\\\b - see above\n            //     $ - ensures words at end of line are considered for abbreviation\n            const regExp = new RegExp(\"(^|\\\\W|\\\\b)(\" + allApprovedAbbrs + \")(\\\\W|\\\\b|$)\", modifiers);\n            const newSentence = sentence.replace(regExp,\n                (match, p1, p2, p3) => {\n                    //p2 = p2.replace(/ /g,'\\\\s')\n                    let abbr = finalAbbrDict[p2];\n                    if (!abbr) {\n                        abbr = '';\n                    }\n                    return p1 + abbr + p3;\n                }\n            );\n            return newSentence;\n        }\n    , [abbrDict])\n\n\n    function handleOptimChange() {\n        setEnableOptim(!enableOptim);\n    }\n    function handleSelect(newSel) {\n        const maxWords = 8;\n        if (newSel.trim() !== '') {\n            setSelection(BULLET.Tokenize(newSel.trim()).slice(0, maxWords).join(' '));\n        }\n\n    }\n\n    function handleWidthChange(e) {\n        setWidth(parseFloat(e.target.value))\n    }\n    function handleTextNorm() {\n        \n        const selectionsToReplace = [];\n        const contentState = editorState.getCurrentContent();\n        contentState.getBlockMap().forEach((block, key)=>{\n            findWithRegex(/\\s+/g, block, (anchorOffset, focusOffset) =>{\n                const selection = SelectionState.createEmpty(key).merge({anchorOffset, focusOffset});\n                selectionsToReplace.push(selection);\n            });\n        });\n        \n        let newContentState = contentState;\n        // need to reverse the selections list, because otherwise as the newContentState is iteratively changed, \n        //  subsequent selections will get shifted and get all jacked up. This problem can be avoided by going backwards.\n        selectionsToReplace.reverse().forEach(selection => {\n            newContentState = Modifier.replaceText(newContentState, selection, ' ');\n        });\n\n        setEditorState(EditorState.createWithContent(newContentState));\n\n\n    }\n    function handleTextUpdate(newText) {\n        return () => setEditorState(EditorState.createWithContent(ContentState.createFromText(newText)));\n    }\n    function handleWidthUpdate(newWidth) {\n        return () => setWidth(newWidth);\n    }\n    function handleSave() {\n\n        return {\n            width: width,\n            text: editorState.getCurrentContent().getPlainText('\\n'),\n            editorState: editorState.toJS(),\n            abbrData: abbrData,\n            enableOptim: enableOptim,\n        }\n    }\n    function handleTabChange(newTab) {\n        return () => setCurrentTab(newTab);\n    }\n    function handleThesaurusHide() {\n        setShowThesaurus(!showThesaurus)\n    }\n    function handleSelReplace(word) {\n\n        if (document.activeElement.className.match(/public-DraftEditor-content/)) {\n\n            const { selectedText, start, anchorKey, selectionState } = getSelectionInfo(editorState);\n\n            const trailingSpaces = selectedText.match(/\\s*$/)[0];\n            const newEnd = start + word.length + trailingSpaces.length;\n\n            const newSelectionState = SelectionState.createEmpty(anchorKey).merge({\n                anchorOffset: start,\n                focusOffset: newEnd,\n            })\n\n            const newContent = Modifier.replaceText(editorState.getCurrentContent(), selectionState, word + trailingSpaces);\n            const newEditorState = EditorState.push(editorState, newContent, 'insert-characters');\n            const newEditorStateSelect = EditorState.forceSelection(newEditorState, newSelectionState);\n\n            setEditorState(newEditorStateSelect);\n        };\n    }\n\n    const tabs = ['Bullets', 'Abbreviations'];\n    const tabContents = [\n    <BulletComparator \n        editorState={editorState}\n        setEditorState={setEditorState}\n        abbrReplacer={abbrReplacer} \n        width={width}\n        onSelect={handleSelect} enableOptim={enableOptim} />,\n    <AbbrsViewer\n        data={abbrData}\n        setData={setAbbrData} />\n    ];\n    \n    return (\n\n        <div className=\"container is-fluid\">\n            <div className='columns is-multiline'>\n                <div className='column is-full'>\n                    <Logo />\n                    <DocumentTools\n                        enableOptim={enableOptim}\n                        onOptimChange={handleOptimChange}\n                        width={width} onWidthChange={handleWidthChange}\n                        onWidthUpdate={handleWidthUpdate}\n                        onTextNorm={handleTextNorm}\n                        onTextUpdate={handleTextUpdate}\n                        onSave={handleSave}\n                        onJSONImport={handleJSONImport}\n                        onThesaurusHide={handleThesaurusHide}\n                    />\n                </div>\n\n                <div className={'column is-full ' + (showThesaurus ? \"\" : \"is-hidden\")}>\n                    <SynonymViewer word={selection} onSelReplace={handleSelReplace} abbrDict={abbrDict} abbrReplacer={abbrReplacer}\n                        onHide={handleThesaurusHide} />\n                </div>\n                <div className=\"column is-full\">\n                    <div className=\"tabs\">\n                        <ul>\n                            {tabs.map((tab, i) => {\n                                return (\n                                    <li key={i} className={currentTab === i ? \"is-active\" : ''} ><a  onClick={handleTabChange(i)}>{tab}</a></li>\n                                )\n                            }\n                            )}\n                        </ul>\n                    </div>\n                </div>\n                <div className='column is-full'>\n                    {tabContents[currentTab]}\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default BulletApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\n//import {Bullet, BulletComparator, Skeleton} from \"./components/bullets.js\"\nimport BulletApp from \"./components/main.js\"\n\nimport \"./styles/index.scss\"\nimport 'handsontable/dist/handsontable.full.css'\n\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\n\nconst tableData = [{\n  enabled: true,\n  value: 'abbreviations',\n  abbr: 'abbrs',\n}, {\n  enabled: true,\n  value: 'table',\n  abbr: 'tbl',\n}, {\n  enabled: true,\n  value: 'optimize',\n  abbr: 'optim',\n}, {\n  enabled: true,\n  value: 'with ',\n  abbr: 'w/',\n}, {\n  enabled: true,\n  value: 'parentheses',\n  abbr: 'parens',\n},\n];\n\n\n\n\nlet settings;\ntry {\n\n  if (localStorage.getItem('bullet-settings')) {\n    settings = JSON.parse(localStorage.getItem(\"bullet-settings\"))[0];\n\n\n  }\n} catch (err) {\n  if (err.name === 'SecurityError') {\n    console.log('Was not able to get localstorage bullets due to use of file interface and browser privacy settings');\n  } else {\n    throw err;\n  }\n}\n\n\n\nWebFont.load({\n  custom: {\n    families: ['AdobeTimes']\n  }\n});\n\n\n// <BulletApp savedSettings={settings} tableSettings={tableSettings} abbrData={tableData} initialText={initialText} initialWidth={\"202.321mm\"} />\n\nconst initialText = settings?.text ?? '- This is a custom built bullet writing tool; abbreviations will be replaced according to table in the abbreviations tab--you will see output on the right\\n\\\n- This tool can optimize spacing; output will be red if the optimizer could not fix spacing with 2004 or 2006 Unicode spaces\\n\\\n- Click the thesaurus button to show one; select a word in this or the output box to view synonyms--words in parentheses are abbreviations that are configured';\n;\nconst initialWidth = settings?.width ?? 202.321;\nlet initialAbbrData = settings?.abbrData ?? tableData;\nconst initialEditorState = settings?.editorState ?? undefined;\n\n// for backwards compatibility \nif (Array.isArray(initialAbbrData[0])){\n  initialAbbrData = initialAbbrData.map((row) => {\n    return {\n      enabled: row[0],\n      value: row[1],\n      abbr: row[2],\n    };\n  })\n}\n\nReactDOM.render(\n  <>\n    <div className=\"section\" id=\"stuff\" >\n      <BulletApp initialAbbrData={initialAbbrData} initialText={initialText} initialWidth={initialWidth} initialEditorState={initialEditorState} />\n    </div>\n    <div className=\"container\" id=\"footer\">\n      <div>If you have feedback, submit\n          an <a href='https://github.com/AF-VCD/pdf-bullets/issues'>issue</a>\n          or a <a href=\"https://github.com/AF-VCD/pdf-bullets/pulls\">pull request</a>\n      </div>\n      <div>This site utilizes PDF.JS (pdf import), HandsOnTable (spreadsheet), the DataMuse API (thesaurus), and Bulma (CSS).</div>\n      <div>This site has basic analytics to track the total number of visits to the page. See <a href=\"https://github.com/ckhordiasma/log-bullet-visitors\">here</a> for details</div>\n      <div>Maintained by Christopher Kodama </div>\n    </div>\n  </>\n  , document.getElementById('root'));\n\nincrementVisitors();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nfunction incrementVisitors() {\n  // code for incrementing visitor count    \n  const xh = new XMLHttpRequest();\n  xh.onreadystatechange = () => {\n    if (xh.readyState === XMLHttpRequest.DONE) {\n      var status = xh.status;\n\n      // Not sure what status codes are acceptable.. using MDN successful responses and redirects range as a guide\n      if ((status >= 200 && status < 400)) {\n        // The request has been completed successfully\n        const count = JSON.parse(xh.response).Count;\n        console.log(\"The bullets site(s) have been visited \" + count + \" times.\");\n\n      } else {\n        console.log(\"Visitor count increment: task failed successfully\");\n      }\n    }\n  }\n  xh.open(\"POST\", \"https://g5z50elklh.execute-api.us-east-2.amazonaws.com/default/LogVisitors\", true);\n  xh.send();\n}"],"sourceRoot":""}