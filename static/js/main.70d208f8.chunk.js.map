{"version":3,"sources":["static/abbrs.xlsx","components/bullets.js","components/tools.js","components/abbrs.js","components/thesaurus.js","components/main.js","serviceWorker.js","index.js"],"names":["module","exports","BULLET","Bullet","props","evaluate","dispNode","renderRef","current","style","whiteSpace","parentWidth","parentNode","getBoundingClientRect","width","singleWidth","singleHeight","height","wordBreak","trueHeight","overflow","madeNewLine","results","text","direction","optimization","status","React","createRef","this","onMouseUp","onHighlight","className","class","ref","sentence","split","Tokenize","join","replace","PureComponent","BulletEditor","handleChange","e","handleTextChange","fixHeight","handleInput","Math","max","scrollHeight","minHeight","prevProps","start","end","textSelRange","trigger","setSelectionRange","onChange","value","onInput","maxHeight","onKeyUp","BulletOutputViewer","selectOutput","ctrlKey","keyCode","preventDefault","window","getSelection","range","document","createRange","selectNode","outputRef","removeAllRanges","addRange","handleCopy","Untweak","toString","clipboardData","setData","state","abbrBullets","bullets","map","abbrReplacer","prevState","newAbbrBullets","setState","keyDict","tabIndex","onKeyDown","onCopy","line","i","key","enableOptim","rawText","optims","onOptim","optimizer","HeightAdjustedBullet","bulletRef","checkingHeight","newHeight","newHeightSetting","bullet","Tweak","display","OptimizedBullet","optimExists","update","result","loading","bufferedOptimize","delay","updating","clearTimeout","setTimeout","optimize","bufferedUpdate","Clean","then","Promise","res","origSentence","optWords","initResults","seed","prevResults","finalResults","newSpace","trim","iReplace","length","floor","abs","hashCode","splice","slice","newSentence","newResults","newColor","color","BulletComparator","updateOptims","params","optimized","target","handleSelect","selection","onSelect","selectionStart","textAreaSelection","substring","selectionEnd","pdfjs","require","pdfjsWorker","GlobalWorkerOptions","workerSrc","ImportTools","importFile","fileInputRef","callback","file","console","log","type","getDataFromPDF","getDataFromJSON","files","inputClick","importType","click","tasks","filedata","pdfSetup","arrayBuffer","buffer","uint8Array","Uint8Array","getDocument","data","promise","getXFA","pdf","getFormName","getMetadata","info","Custom","getAllData","all","pullBullets","formName","datasetXML","xmlDoc","DOMParser","parseFromString","bulletText","Forms","tagName","querySelector","innerHTML","getPageInfo","templateXML","fonts","fontSizes","widths","bulletTag","getAttribute","getBulletsFromPdf","textUpdater","onTextUpdate","widthUpdater","onWidthUpdate","bulletsHTML","documentElement","textContent","reader","FileReader","onload","JSON","parse","onJSONImport","BulletApp","ParseSettings","readAsText","hoverOut","hovering","toggleMenu","menuState","onClick","aria-haspopup","aria-controls","icon","faAngleDown","id","role","onMouseLeave","OutputTools","min","step","onWidthChange","onOptimChange","InputTools","onTextNorm","SaveTools","onSave","settings","storedData","stringify","localStorage","setItem","err","name","alert","onExport","dataURI","encodeURIComponent","exportRef","href","download","Logo","ThesaurusTools","onHide","DocumentTools","aria-label","onThesaurusHide","AbbrTools","importSampleAbbrs","rej","xhttp","XMLHttpRequest","responseType","response","open","SampleAbbrFile","send","getDataFromXLS","importAbbrs","workbook","XLSX","read","raw","rows","utils","sheet_to_json","Sheets","SheetNames","updater","readAsBinaryString","exportToXLS","wb","book_new","sht","aoa_to_sheet","getter","book_append_sheet","writeFile","AbbrsViewer","handleAbbrChange","onAbbrChange","tableRef","reloadData","hotInstance","alter","countRows","loadData","getData","abbrData","afterChange","afterPaste","afterRemoveRow","afterUpdateSettings","SynonymViewer","getSynonyms","phrase","onreadystatechange","readyState","dat","responseText","synonyms","item","word","hidden","mainBody","replacedWord","otherAbbrs","abbrDict","header","abbr","onSelReplace","explanation","noResults","marginRight","ceil","Object","defineProperty","Array","prototype","n","fill","_","SynonymList","handleCardClick","activeElement","anchorNode","firstChild","ta","cols","onMouseDown","faPlus","size","Synonym","mainAbbrDisp","fontWeight","enabledAbbrDisp","disabledAbbrDisp","enabled","enabledAbbrs","filter","fontStyle","disabled","disabledAbbrs","handleJSONImport","abbrTable","newAbbrDict","fullWord","String","getDataAtRowProp","push","createAbbrDict","row","createAbbrReplacer","finalAbbrDict","keys","abbrs","regExp","RegExp","match","p1","p2","p3","handleOptimChange","newSel","handleWidthChange","handleTextNorm","handleTextUpdate","newText","handleWidthUpdate","newWidth","handleSave","abbrsViewerRef","handleTabChange","newTab","currentTab","handleThesaurusHide","oldState","showThesaurus","handleSelReplace","newWord","oldText","beforeText","replacedText","beforeSpaces","afterSpaces","subword","toUpperCase","afterText","random","handleCaseChange","enableCase","savedSettings","initialText","initialWidth","tab","parseFloat","tableSettings","Component","settingsAll","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","hash","charCodeAt","columns","disableVisualSelection","stretchH","autoWrapRow","maxRows","Infinity","manualRowResize","manualColumnResize","rowHeaders","colHeaders","trimWhitespace","enterBeginsEditing","manualRowMove","manualColumnMove","columnSorting","indicator","autoColumnSize","minRows","contextMenu","licenseKey","search","queryMethod","queryStr","instance","col","DEFAULT_CALLBACK","testResult","getCellMeta","isSearchResult","apply","arguments","getItem","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70d208f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/abbrs.914e7438.xlsx\";","import React from \"react\"\n\n\n// optimization status codes\n// status codes for optimization direction \n// had to move this to a floating object because MS Edge doesn't support static variables\nconst BULLET = {\n    OPTIMIZED: 0,\n    FAILED_OPT: 1,\n    NOT_OPT: -1,\n    ADD_SPACE: 1,\n    REM_SPACE: -1,\n    MAX_UNDERFLOW: -4\n}\nclass Bullet extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.renderRef = React.createRef();\n    }\n    render(){\n        return(\n            <div style={{width: this.props.width, height:this.props.height}} onMouseUp={this.props.onHighlight} >\n                <span className={this.props.class} style={this.props.style} ref={this.renderRef} >\n                    {this.props.text}\n                </span>\n            </div>\n        );\n    }\n    static Tokenize (sentence) {\n        return sentence.split(/[\\s]+/);\n    }\n    static Clean(sentence){\n        return Bullet.Tokenize(sentence).join(' ');\n    }    // Tweak and Untweak are used to fix some miscellaneous PDF-vs-HTML formatting problems\n    static Tweak(sentence){    \n        // adds a 0-width space (\\u200B) after forward slashes to cause them to wrap\n        sentence =  sentence.replace(/(\\w)\\//g,'$1/\\u200B');\n        \n        // adds a non-breaking dash (\\u2011) instead of a dash to prevent wrapping\n        sentence =  sentence.replace(/-/g,'\\u2011');\n        return sentence;\n    }\n    \n    static Untweak(sentence){\n        sentence =  sentence.replace(/[\\u200B]/g,'');\n        sentence =  sentence.replace(/[\\u2011]/g,'-');\n        return sentence;\n    }\n    evaluate = () => {\n        const dispNode = this.renderRef.current;\n        //console.log('height adjustment info: ',this.renderRef.current, this.renderRef.current.getBoundingClientRect())\n        dispNode.style.whiteSpace = \"nowrap\";\n        const parentWidth = dispNode.parentNode.getBoundingClientRect().width;\n        const singleWidth = dispNode.getBoundingClientRect().width;\n        \n        //This checks to see what the single line height of the ref nodeis.\n        const singleHeight = dispNode.getBoundingClientRect().height;\n        //console.log(singleHeight);\n\n        // This makes the node go back to normal wrapping, and we can run getBoundingClientRect() \n        //  again to see the height again\n        dispNode.style.whiteSpace = \"pre-wrap\";\n        dispNode.style.wordBreak = \"break-word\";\n\n        const trueHeight = dispNode.getBoundingClientRect().height;\n        //dispNode.style.wordBreak = 'inherit';\n        const overflow = (singleWidth - parentWidth);\n    \n        const madeNewLine = trueHeight > singleHeight;\n        \n        let results = {\n            \"optimization\": {\n                \"sentence\": this.props.text,\n                \"status\":false,\n            },\n            \"direction\": false,\n            \"height\": trueHeight,\n        }\n\n        // you may be wondering, 'why do you have to check width and height? couldn't you \n        //  just check to see if overflow is greater than or less than 0? You would think so,\n        //  but there are cases where the browser will fit a wider element into a smaller one,\n        //  WITHOUT wrapping the line... \n        if(madeNewLine){\n            results.direction = BULLET.REM_SPACE;\n        }else{\n            results.direction = BULLET.ADD_SPACE;\n        }\n\n        if(overflow > BULLET.MAX_UNDERFLOW && ! madeNewLine){\n            results.optimization.status = BULLET.OPTIMIZED;\n        }else {\n            results.optimization.status = BULLET.FAILED_OPT;\n        }\n        return results;\n    }\n}\n\nclass BulletEditor extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.ref = React.createRef();\n    }\n    handleChange = (e) => {\n        this.props.handleTextChange(e)\n        this.fixHeight();\n    }\n    handleInput = (e) => {\n        \n        this.fixHeight();\n    }\n    fixHeight = () => {\n\n        this.ref.current.style.height = 'auto';\n        this.ref.current.style.height = Math.max(this.ref.current.scrollHeight, this.props.minHeight) + 'px';\n        \n    }\n    componentDidMount(){\n        this.fixHeight();\n        \n    }\n    componentDidUpdate(prevProps){\n        \n        \n        this.fixHeight();\n        if(this.props.textSelRange.trigger !== prevProps.textSelRange.trigger){\n            \n            let start, end;\n            if(this.props.textSelRange.start < this.props.textSelRange.end){\n                start = this.props.textSelRange.start;\n                end = this.props.textSelRange.end;\n            }else{\n                start = this.props.textSelRange.end;\n                end = this.props.textSelRange.start;\n            }\n            this.ref.current.setSelectionRange(start, end)\n        }\n        \n\n    }\n    render(){\n        return (\n            <div className=\"border\" >\n                <textarea \n                    ref={this.ref}\n                    onChange={this.handleChange} \n                    value={this.props.text} \n                    onInput={this.handleInput}\n                    style={{\n                        width: this.props.width,\n                        maxHeight: \"unset\",\n                    }}\n                    onMouseUp={this.props.onHighlight}\n                    onKeyUp={this.props.onHighlight}\n                    \n                    className=\"bullets textarea is-paddingless is-marginless\"></textarea>\n            </div>\n        )\n    }\n}\n//how do i get lines to line up between the output and editor?\nclass BulletOutputViewer extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.outputRef = React.createRef();\n        this.state = {\n            abbrBullets: this.props.bullets.map(this.props.abbrReplacer)\n        };\n    }\n    componentDidUpdate(prevProps,prevState){\n        const newAbbrBullets = this.props.bullets.map(this.props.abbrReplacer);\n        if(prevProps.bullets.map(prevProps.abbrReplacer).join('') !== newAbbrBullets.join('')){\n            this.setState({\n                abbrBullets: newAbbrBullets,\n            });\n        }\n    }\n    selectOutput = (e)=>{\n        if(e.ctrlKey && e.keyCode === 65){\n            e.preventDefault();\n            //console.log('control-a')\n            //console.log(this.outputRef.current)\n            if (window.getSelection) { \n                const range = document.createRange();\n                range.selectNode(this.outputRef.current);\n                window.getSelection().removeAllRanges();\n                window.getSelection().addRange(range);\n            }\n        }\n    }\n    handleCopy = (e)=>{\n        \n        let text = Bullet.Untweak(window.getSelection().toString())\n        //console.log('Copy event: ' + text)\n        text = text.replace(/\\n/g,'\\r\\n'); //need this for WINDOWS!\n        //console.log('Copy event: ' + text)\n        e.clipboardData.setData('text/plain',text);\n        e.preventDefault();\n    }\n    render(){\n        const keyDict = {};\n        return (\n            <div className=\"border\" tabIndex=\"1\" \n                onKeyDown={this.selectOutput} \n                onKeyUp={this.props.onHighlight} \n                ref={this.outputRef}\n                onCopy={this.handleCopy}>\n                {this.props.bullets.map(\n                (line,i)=>{\n                    const key = this.state.abbrBullets[i] + this.props.width + this.props.enableOptim;\n                    \n                    if(key in keyDict){\n                        keyDict[key] += 1;\n                    }else{\n                        keyDict[key] = 1;\n                    }\n                    return <HeightAdjustedBullet text={this.state.abbrBullets[i] || ''} \n                        rawText={line}\n                        width={this.props.width}\n                        key={key + keyDict[key]} \n                        optims={this.props.optims}\n                        onOptim={this.props.onOptim}\n                        optimizer={this.props.optimizer}\n                        enableOptim={this.props.enableOptim}\n                        onHighlight={this.props.onHighlight}\n                        abbrReplacer = {this.props.abbrReplacer}\n                        />\n                })}\n            </div>\n        )\n    }\n\n}\nclass HeightAdjustedBullet extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.bulletRef = React.createRef();\n        this.state = {\n            checkingHeight : true,\n            height: 'unset',\n        }\n    }\n    componentDidMount(){\n        \n        if(this.state.checkingHeight){\n            \n            const newHeight = this.bulletRef.current.evaluate().height;\n            const newHeightSetting = newHeight===0? 'inherit':newHeight+'px';\n            this.setState({\n                height:newHeightSetting,\n                checkingHeight: false,\n            })\n   \n        }\n    }\n    componentDidUpdate(prevProps, prevState){\n        \n        if(prevProps.rawText !== this.props.rawText){\n            this.setState({\n                checkingHeight: true,\n            })\n        }else{\n            if(this.state.checkingHeight){\n                \n                const newHeight = this.bulletRef.current.evaluate().height;\n                const newHeightSetting = newHeight===0? 'inherit':newHeight+'px';\n                this.setState({\n                    checkingHeight: false,\n                    height: newHeightSetting,\n                })\n            }\n        }\n    }\n    render(){\n            let bullet;\n            if(this.state.checkingHeight){\n                bullet = (\n                    <Bullet text={Bullet.Tweak(this.props.rawText)} \n                        ref={this.bulletRef}\n                        width={this.props.width} \n                        onHighlight={this.props.onHighlight}\n                        class='bullets optimized' \n                        style={{\n                            display:'inline-block',\n                            wordBreak:'break-word',\n                        }}\n                    />\n                )\n            }else{\n                bullet = (\n                    <OptimizedBullet text={this.props.text} \n                        width={this.props.width}\n                        height={this.state.height} \n                        optims={this.props.optims}\n                        onOptim={this.props.onOptim}\n                        optimizer={this.props.optimizer}\n                        enableOptim={this.props.enableOptim}\n                        onHighlight={this.props.onHighlight}\n                        abbrReplacer = {this.props.abbrReplacer}\n                        />\n                )\n            }\n            return ( <div>{bullet} </div>);\n        \n    }\n}\nclass OptimizedBullet extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.state = {\n            text: this.props.text,\n            loading: true,\n            updating: null,\n            status: BULLET.NOT_OPT,\n            height:'unset',\n        }\n\n        this.bulletRef=React.createRef();\n        if( false) console.log(\"constructed: \" + this.state.text)\n    }\n    optimExists = () => {\n        if(this.props.optims[this.state.text] && this.props.optims[this.state.text][this.props.width]){\n            return true\n        }else{\n            return false\n        }\n    }\n    update = () => {\n        const sentence = this.state.text;\n        if(!this.props.enableOptim){\n            \n            this.setState({\n                text: this.props.text,\n                status: BULLET.NOT_OPT,\n                loading:false\n            })\n        }else if(this.optimExists()){\n            \n            this.setState({\n                text: this.props.optims[sentence][this.props.width].result,\n                status: this.props.optims[sentence][this.props.width].status,\n                loading:false\n            });\n        \n        }else{\n            this.setState({\n                loading:true\n            })\n\n            this.bufferedOptimize(500);\n        }\n    }\n   \n    bufferedOptimize = (delay) => { \n        if(this.state.updating && this.state.loading){\n            clearTimeout(this.state.updating)\n        }\n        this.setState({\n            updating: setTimeout(()=>{\n                this.optimize();\n                this.setState({\n                    updating:null,\n                    loading:false,\n                });\n            }, delay),\n        })\n    }\n    bufferedUpdate = (delay) => { \n        if(this.state.updating){\n            clearTimeout(this.state.updating)\n        }\n        this.setState({\n            updating: setTimeout(()=>{\n                this.update();\n                this.setState({\n                    updating:null,\n                    loading:false,\n                });\n            }, delay),\n        })\n    }\n    optimize = () => {\n        const sentence = Bullet.Clean(this.state.text);\n\n        return this.optimizer().then((optimization) => {\n            // send optim back to global dictionary to update it\n            this.props.onOptim({\n                \"sentence\":sentence,\n                \"width\": this.props.width,\n                \"optimized\": optimization.sentence,\n                \"status\": optimization.status,\n            });\n            return optimization;\n        }).then((optimization) => {\n            this.setState({\n                text:optimization.sentence,\n                status: optimization.status,\n                loading:false,\n            })\n        });\n        \n    }\n    optimizer = () =>{\n        return new Promise((res)=>{\n            //console.log(ref)\n            //console.log(this.evaluate(bullet))\n            const bulletRef = this.bulletRef.current;\n            if(bulletRef === null) return;\n            const smallerSpace = \"\\u2006\";\n            const largerSpace = \"\\u2004\";\n\n            const origSentence = \n                Bullet.Clean(\n                    this.props.text \n                )\n\n            //initialization of optimized words array\n            let optWords = Bullet.Tokenize(origSentence);\n            \n            const initResults = bulletRef.evaluate();\n            this.setState({\n                text: origSentence\n            })\n            \n            \n            \n            //initial instantiation of previousResults\n            let prevResults = initResults;\n            let finalResults = initResults;\n            const newSpace = (initResults.direction === BULLET.ADD_SPACE)? largerSpace: smallerSpace;\n            \n            \n        \n            function getRandomInt(seed,max){\n                return Math.floor( Math.abs((Math.floor(9*seed.hashCode()+5) % 100000) / 100000) * Math.floor(max));\n            }\n            \n\n            //if the sentence is blank, do nothing.\n            if(! origSentence.trim()){\n                finalResults.optimization.status = BULLET.OPTIMIZED;\n            } else{\n\n                while(finalResults.optimization.status !== BULLET.OPTIMIZED){\n                    //don't select the first space after the dash- that would be noticeable and look wierd.\n                    // also don't select the last word, don't want to add a space after that.\n                    let iReplace = getRandomInt(optWords.join(''), optWords.length -1 -1) + 1;\n                    \n                    //merges two elements together, joined by the space\n                    optWords.splice( \n                        iReplace, 2, \n                        optWords.slice(iReplace,iReplace+2).join(newSpace)\n                    );\n            \n                    //make all other spaces the normal space size\n                    let newSentence = optWords.join(' ');\n                    this.setState({\n                        text: newSentence\n                    })\n                    // check to see how sentence fits\n                    let newResults = bulletRef.evaluate();\n                    //console.log(newResults)\n                    if(initResults.direction === BULLET.ADD_SPACE && newResults.direction === BULLET.REM_SPACE){            \n                        //console.log(\"Note: Can't add more spaces without overflow, reverting to previous\" );\n                        finalResults.optimization = prevResults.optimization;\n                        break;\n                    } else if(initResults.direction === BULLET.REM_SPACE && newResults.direction === BULLET.ADD_SPACE){\n                        //console.log(\"Removed enough spaces. Terminating.\" );\n                        finalResults.optimization = newResults.optimization;\n                        break;\n                    } else if(optWords.length <= 2){ //this conditional needs to be last\n                        //console.log(\"\\tWarning: Can't replace any more spaces\");\n                        finalResults.optimization = newResults.optimization;\n                        break;\n                    }\n                    prevResults = newResults;\n                } \n            } \n\n            res(finalResults.optimization)\n        })\n    };\n    componentDidUpdate(prevProps){\n\n    }\n    componentDidMount(){\n        \n        \n        this.update();\n        this.setState({height: this.props.height})\n\n    }\n    \n    componentWillUnmount(){\n        \n        clearTimeout(this.state.updating)\n    }\n\n    render(){\n\n        let newColor = \"inherit\";\n   \n        if(this.state.loading){\n            newColor = \"gray\"\n        }else if(this.state.status === BULLET.FAILED_OPT){\n            newColor = \"red\"\n        }\n        \n\n        return (\n            <Bullet text={Bullet.Tweak(this.state.text)} \n                ref={this.bulletRef}\n                width={this.props.width} \n                onHighlight={this.props.onHighlight}\n                class='bullets optimized' \n                style={{\n                    color: newColor,\n                    display:'inline-block',\n                    wordBreak:'break-word',\n                }}\n                height={this.state.height}/>\n        )\n    }\n\n}\nclass BulletComparator extends React.PureComponent {\n    constructor(props){\n        super(props);\n        \n        this.state = { \n            enableOptim: true,\n            optims: {}\n        };\n\n    }\n    \n    updateOptims = (params) => {\n        this.setState((state) => {\n            state.optims[params.sentence] = state.optims[params.sentence] || {};\n            state.optims[params.sentence][params.width] = {\n                result: params.optimized,\n                status: params.status\n            };\n            return state\n        });\n    }\n\n    handleTextChange = (e) => {\n        this.setState({\n            text: e.target.value,\n        });\n    }\n    handleSelect = (e) =>{\n        if( false) console.log('selection registered in reactBullets')\n        const selection = window.getSelection().toString();\n        if(selection !== \"\"){\n            this.props.onSelect(selection);\n        }else if(e.target.selectionStart){\n            //this hack is for microsoft edge, which sucks at window.getSelection()\n            const textAreaSelection = e.target.value.substring(e.target.selectionStart, e.target.selectionEnd);\n            if( false) console.log(\"selection: \" + textAreaSelection);\n            this.props.onSelect(textAreaSelection);\n        }\n    }\n    render() {\n\n        return (\n            <div className=\"columns is-multiline\">\n                <div className=\"column is-narrow\">\n                <h2 className='subtitle'>Input Bullets Here:</h2>\n                <BulletEditor \n                    textSelRange={this.props.textSelRange}\n                    text={this.props.text} \n                    handleTextChange={this.props.handleTextChange} \n                    width={this.props.width}\n                    onHighlight={this.handleSelect}\n                    minHeight={100}/>\n                </div>\n                <div className=\"column is-narrow\">\n                <h2 className='subtitle'>View Output Here:</h2>\n                <BulletOutputViewer bullets={this.props.text.split('\\n')} \n                    abbrReplacer={this.props.abbrReplacer}\n                    width={this.props.width} \n                    optims={this.state.optims} \n                    enableOptim={this.props.enableOptim} \n                    optimizer={this.optimizer}\n                    onOptim={this.updateOptims}\n                    onHighlight={this.handleSelect}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport {Bullet, BulletComparator};","import React from \"react\"\nimport BulletApp from \"./main.js\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport  {faAngleDown} from \"@fortawesome/free-solid-svg-icons\"\n\nconst pdfjs = require('@ckhordiasma/pdfjs-dist');\nconst pdfjsWorker = require('@ckhordiasma/pdfjs-dist/build/pdf.worker.entry');\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\n//PDF import\nclass ImportTools extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.fileInputRef = React.createRef();\n        this.state={\n            type:'none',\n            hovering:false,\n        }\n    }\n\n    importFile = (e) => {\n        if(!this.fileInputRef.current.value){\n            console.log('no file picked');\n            return;\n        }else{\n            let callback = (file)=>{console.log(file)};\n            if(this.state.type === 'PDF'){\n                callback = this.getDataFromPDF;\n            }else if(this.state.type === 'JSON'){\n                callback = this.getDataFromJSON;\n            }\n            //return Promise.resolve(this.fileInputRef.current.files[0]).then(callback).then(() => {\n            //    this.fileInputRef.current.value = ''});\n            callback(this.fileInputRef.current.files[0]);\n            this.fileInputRef.current.value = '';\n        }\n    }\n    inputClick = (importType) => {\n        return () => {\n            this.setState({\n                type: importType,\n            });\n            this.fileInputRef.current.click();\n        };\n    }\n    getDataFromPDF = (file) => {\n        const tasks = getBulletsFromPdf(file);\n        //note: these promises are PDFJS promises, not ES promises\n\n        //was not able to call this (this.props.onTextUpdate) inside the \"then\" scope, so I const'ed them out\n        const textUpdater = this.props.onTextUpdate;\n        const widthUpdater = this.props.onWidthUpdate;\n\n        tasks.pullBullets.then(function(bulletsHTML){\n                        \n            // This is needed to convert the bullets HTML into normal text. It gets rid of things like &amp;\n           const bullets = \n                new DOMParser().parseFromString(bulletsHTML,'text/html').documentElement.textContent;\n            textUpdater(bullets)();\n        });\n\n        tasks.getPageInfo.then(function(data){\n            const newWidth = data.width;\n            widthUpdater(data.width)();          \n        });\n    }\n    getDataFromJSON = (file) => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            \n            const data = JSON.parse(e.target.result);\n            \n            this.props.onJSONImport(BulletApp.ParseSettings(data));\n        };\n        reader.readAsText(file)\n    }\n\n    hoverOut = () => {\n        this.setState({hovering: false});\n    }\n    toggleMenu = () => {\n        const current = this.state.hovering;\n        this.setState({hovering:!current});\n    }\n    render(){\n        const menuState = this.state.hovering? \"is-active\": \"\";\n        return( \n            <div className={\"dropdown\" + ' ' + menuState}>\n                <input type=\"file\" onChange={this.importFile} style={{display:\"none\"}} ref={this.fileInputRef}></input>\n                <div className=\"dropdown-trigger\">\n                    <div className=\"buttons has-addons\">\n                        <button className=\"button\" onClick={this.inputClick('PDF')}>Import</button>\n                        <button className=\"button\" onClick={this.toggleMenu}  aria-haspopup=\"true\" aria-controls=\"import-menu\" >\n                            <span className=\"icon\">\n                                 \n                                 <FontAwesomeIcon  icon={faAngleDown}/> \n                            </span> \n                        </button>\n                    </div>\n                </div>\n                <div className=\"dropdown-menu\" id=\"import-menu\" role=\"menu\" onMouseLeave={this.hoverOut}>\n                    <div className=\"dropdown-content\">\n                        <a className=\"dropdown-item\" onClick={this.inputClick('PDF')}>PDF</a>\n                        <a className=\"dropdown-item\" onClick={this.inputClick('JSON')}>JSON</a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n// form width, space optimization, select text\nclass OutputTools extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.state = {\n\n        }\n    }\n    render(){\n        const widthAWD = '202.321mm';\n        const widthEPR = '202.321mm';\n        const widthOPR = '201.041mm';\n        return( \n            <div className=\"field is-grouped\">\n                {/* if I want to group things together in a field, each subelement must have the control class name */}\n                <div className=\"control field has-addons\">\n                    <div className=\"control has-icons-right\">\n                        <input className=\"input\" id=\"widthInput\" type='number' min=\"100\" max=\"500\" step=\".001\" value={this.props.width.replace(/[a-zA-Z]/g,'')} onChange={this.props.onWidthChange}></input>\n                        <span className='icon is-right'>mm</span>\n                    </div>\n                    <div className=\"control buttons has-addons\">\n                        <a className={\"button is-primary\" + ' ' + (this.props.width===widthAWD?'':'is-outlined')}\n                            onClick={this.props.onWidthUpdate(widthAWD)}>AWD</a>\n                        <a className={\"button is-success\" + ' ' + (this.props.width===widthEPR?'':'is-outlined')}\n                            onClick={this.props.onWidthUpdate(widthEPR)}>EPR</a>\n                        <a className={\"button is-link\" + ' ' + (this.props.width===widthOPR?'':'is-outlined')}\n                            onClick={this.props.onWidthUpdate(widthOPR)}>OPR</a> \n                    </div>                    \n\n                </div>\n                \n                <a className={\"control button is-dark\" + (this.props.enableOptim?'':\"is-outlined\")}\n                    onClick={this.props.onOptimChange} id=\"enableOptim\">Auto-Space</a>        \n            </div>\n        );\n    }\n}\n// normalize spaces\nclass InputTools extends React.PureComponent{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return (\n            <button className=\"button\" onClick={this.props.onTextNorm}>Renormalize Input Spacing</button>\n        );\n    }\n}\n// saving settings\nclass SaveTools extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.exportRef = React.createRef();\n        this.state = {hovering:false};\n    }\n    onSave = ()=>{\n        const settings = this.props.onSave();\n        //JSON stringifying an array for future growth\n        const storedData = JSON.stringify([settings]);\n        try{\n            localStorage.setItem('bullet-settings',storedData);\n            console.log(\"saved settings/data to local storage with character length \" + storedData.length);\n        }catch(err){\n            if(err.name === 'SecurityError'){\n                alert(\"Sorry, saving to cookies does not work using the file:// interface and/or your browser's privacy settings\")\n            }else{\n                throw err;\n            }\n        }\n    }\n    onExport = ()=>{\n        const settings = this.props.onSave();\n        //JSON stringifying an array for future growth\n        const storedData = JSON.stringify([settings]);\n        const dataURI = 'data:application/JSON;charset=utf-8,'+ encodeURIComponent(storedData);\n        this.exportRef.current.href=dataURI;\n        this.exportRef.current.click();\n        console.log(\"exported settings/data to local storage with character length \" + storedData.length);\n        \n    }\n    hoverOut = () => {\n        this.setState({hovering: false});\n    }\n    toggleMenu = () => {\n        const current = this.state.hovering;\n        this.setState({hovering:!current});\n    }\n    render(){\n        const menuState = this.state.hovering? \"is-active\": \"\";\n        return (\n            <div className={'dropdown' + ' ' + menuState}>\n                <div className=\"dropdown-trigger\">\n                    <div className=\"buttons has-addons\">\n                        <button className=\"button\" onClick={this.onSave}>Save </button>\n                        <button className=\"button\" aria-haspopup=\"true\" aria-controls=\"save-menu\" >\n                            <span className=\"icon\" onClick={this.toggleMenu} >\n                                <FontAwesomeIcon  icon={faAngleDown}/> \n                            </span> \n                        </button>\n                    </div> \n                </div>\n                <div className=\"dropdown-menu\" id=\"save-menu\" role=\"menu\" onMouseLeave={this.hoverOut}>\n                    <div className=\"dropdown-content\">\n                        <a className=\"dropdown-item\" onClick={this.onSave}>Cookie</a>\n                        <a className=\"dropdown-item\" onClick={this.onExport}>JSON</a>\n                    </div>\n                </div>\n                \n                <a style={{display:\"none\"}} download='settings.json' ref={this.exportRef}></a>\n            </div>\n        );\n    }\n}\nclass Logo extends React.PureComponent{\n    render() {\n        return (\n            <h1 className='title'><span className=\"logo\">AF </span>\n                <span className=\"logo\">Bull</span>et \n                <span className=\"logo\"> Sh</span>aping &amp; \n                <span className=\"logo\"> i</span>teration \n                <span className=\"logo\"> t</span>ool\n            </h1>\n            );\n    }\n}\nclass ThesaurusTools extends React.PureComponent{\n    render(){\n        return(\n            <a className=\"button\" onClick={this.props.onHide} aria-haspopup=\"true\" aria-controls=\"thesaurus-menu\" >\n                <span>Thesaurus</span><span className=\"icon\"  >\n                    <FontAwesomeIcon  icon={faAngleDown}/> \n                </span> \n            </a>\n        );\n    }\n}\nclass DocumentTools extends React.PureComponent{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return (\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-start\">\n                    <div className=\"navbar-item\">\n                        <SaveTools onSave={this.props.onSave}/>\n                    </div>\n                    <div className=\"navbar-item\">\n                        <ImportTools onJSONImport={this.props.onJSONImport} onTextUpdate={this.props.onTextUpdate} onWidthUpdate={this.props.onWidthUpdate}/>\n                    </div>\n                    <div className=\"navbar-item\">\n                        <OutputTools \n                            enableOptim={this.props.enableOptim} onOptimChange={this.props.onOptimChange} \n                            width={this.props.width} onWidthChange={this.props.onWidthChange}\n                            onWidthUpdate={this.props.onWidthUpdate}/>\n                    </div>\n                    <div className=\"navbar-item\">\n                        <InputTools onTextNorm={this.props.onTextNorm}/>\n                    </div>\n                    <div className=\"navbar-item\">\n                        <ThesaurusTools onHide={this.props.onThesaurusHide}/>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\n// could not do a static class property because of MS edge\nconst Forms  = { \n    all : {\n           'AF707': {\n               'fields': ['S2DutyTitleDesc','S4Assessment','S5Assessment','S6Assessment'],\n               'likelyWidth':'201.041mm'\n           },\n           'AF1206': {\n               'fields': ['specificAccomplishments','p2SpecificAccomplishments'],\n               'likelyWidth':'202.321mm'\n           },\n           'AF910': {\n               'fields': ['KeyDuties','IIIComments','IVComments','VComments', 'VIIIComments', 'IXComments'],\n               'likelyWidth':'202.321mm'\n           },\n           'AF911': {\n               'fields': ['KeyDuties','IIIComments','IVComments', 'VIIComments', 'VIIIComments', 'IXComments'],\n               'likelyWidth':'202.321mm'\n           },\n       }\n   };\n   function getBulletsFromPdf(filedata){\n   \n       \n       const pdfSetup = filedata.arrayBuffer().then(function(buffer){\n           const uint8Array = new Uint8Array(buffer);\n\n           return pdfjs.getDocument({data:uint8Array}).promise;\n           \n       });\n   \n       const getXFA = pdfSetup.then(function(pdf){\n            return pdf.getXFA();\n       });\n   \n       const getFormName = pdfSetup.then(function(pdf){\n            return pdf.getMetadata().then(function (result){\n                const prefix = result.info.Custom[\"Short Title - Prefix\"];\n                const num = result.info.Custom[\"Short Title - Number\"];\n                return prefix + '' + num;\n            })\n       });\n       const getAllData = Promise.all([getFormName, getXFA]);\n       const pullBullets = getAllData.then(function(results){\n           \n           const formName = results[0];\n           const xfaDict = results[1];\n           \n           let datasetXML = xfaDict['datasets'];\n           datasetXML = datasetXML.replace(/&#xD;/g,'\\n');\n           \n           const parser = new DOMParser();\n           const xmlDoc = parser.parseFromString(datasetXML, \"text/xml\");\n           \n           let bulletText = '';\n           for (let tagName of Forms.all[formName]['fields']){\n               const bulletTag = xmlDoc.querySelector(tagName);\n               bulletText += bulletTag.innerHTML + '\\n';\n           }\n           return bulletText;\n       });\n   \n       const getPageInfo = getAllData.then(function(results){\n           \n            const formName = results[0];\n            const xfaDict = results[1];\n   \n           const templateXML = xfaDict['template'];\n           const parser = new DOMParser();\n           const xmlDoc = parser.parseFromString(templateXML, \"text/xml\");\n           \n           let fonts = [];\n           let fontSizes = []\n           let widths = [];\n           let i = 0;\n           for (let tagName of Forms.all[formName]['fields']){\n               const bulletTag  = xmlDoc.querySelector(\"field[name='\" + tagName + \"'\");\n               fonts[i] = bulletTag.querySelector('font').getAttribute('typeface');\n               fontSizes[i] = bulletTag.querySelector('font').getAttribute('size');\n               widths[i] = bulletTag.getAttribute('w');\n               i += 1;\n           }\n           for (let font of fonts){\n               if(font !== fonts[0]){\n                   console.log('warning: not all grabbed sections have the same font type');\n                   break;\n               }\n           }\n           for (let fontSize of fontSizes){\n               if(fontSize !== fontSizes[0]){\n                   console.log('warning: not all grabbed sections have the same font size');\n                   break;\n               }\n           }\n           for (let width of widths){\n               if(width !== widths[0]){\n                   console.log('warning: not all grabbed sections have the same width');\n                   break;\n               }\n           }\n           \n           return {'font': fonts[0], 'fontSize':fontSizes[0], 'width':widths[0]}\n           \n           //accomplishmentsTag = templateXML.match(/name=\"specificAccomplishments\"(.*?)<\\/field/);\n           //console.log(accomplishmentsTag)\n       });\n       return {'pullBullets': pullBullets, 'getPageInfo':getPageInfo};\n   }\n\nexport {Logo,DocumentTools};","//import React from 'react';\n//import ReactDOM from 'react-dom';\n//import { HotTable } from '@handsontable/react';\n//import Handsontable from 'handsontable';\n\nimport React from \"react\"\nimport XLSX from \"xlsx\"\nimport SampleAbbrFile from '../static/abbrs.xlsx'\n\n\n\n\nimport { HotTable } from '@handsontable/react';\n\n\nclass AbbrTools extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.fileInputRef = React.createRef();\n    }\n    importSampleAbbrs = ()=>{\n        return new Promise((res,rej)=>{\n            const xhttp = new XMLHttpRequest();\n            xhttp.responseType = 'blob';\n            xhttp.onload = ()=>{\n                res(xhttp.response);\n            }\n            xhttp.open('GET',SampleAbbrFile,true);\n            xhttp.send();\n        }).then(this.getDataFromXLS);        \n    }\n    importAbbrs = (e) => {\n        \n        if(!this.fileInputRef.current.value){\n            console.log('no file picked');\n            return;\n        }else{\n            this.getDataFromXLS(this.fileInputRef.current.files[0]);\n            this.fileInputRef.current.value = '';\n        }\n        \n    }\n    getDataFromXLS = (file) => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const data = e.target.result;\n            const workbook = XLSX.read(data,{\n                type:'binary',\n                raw:true,\n            });\n            const rows = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]],\n                {'header':['enabled','value','abbr']});\n            this.props.updater(rows)\n        };\n        reader.readAsBinaryString(file)\n    }\n    exportToXLS = ()=>{\n        const wb = XLSX.utils.book_new();\n        const sht  = XLSX.utils.aoa_to_sheet(this.props.getter());\n        XLSX.utils.book_append_sheet(wb,sht,'abbrs')\n        XLSX.writeFile(wb,'abbrs.xlsx');\n    }\n    inputClick = () => {\n        this.fileInputRef.current.click();\n    }\n    render(){\n\n        return (\n            <div className='toolbox'>\n                <input type=\"file\" onChange={this.importAbbrs} ref={this.fileInputRef} style={{display:\"none\"}}></input>\n                <button className=\"button\" onClick={this.inputClick}>Import Abbrs</button>\n                <button className=\"button\" onClick={this.exportToXLS}>Export Abbrs</button>\n                <button className=\"button\" onClick={() => { \n                    //if(console.log(\"Are you sure you want to remove all existing acronyms and replace with a common list?\")){\n                        this.importSampleAbbrs();\n                    //}\n                }}>Load Common Abbrs</button>\n            </div>\n        );\n    }\n}\nclass AbbrsViewer extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.tableRef = React.createRef();\n        \n\n    }\n\n    handleAbbrChange = (type) => {\n        \n        return (e)=>{\n\n            this.props.onAbbrChange(this.tableRef);   \n        }\n    }\n    reloadData = (rows)=>{\n        //this.tableRef.current.hotInstance.updateSettings({data:[]});\n        this.tableRef.current.hotInstance.alter(\"remove_row\",0, this.tableRef.current.hotInstance.countRows())\n        this.tableRef.current.hotInstance.loadData(rows);\n\n    }\n    getData = ()=>{\n        return this.tableRef.current.hotInstance.getData();\n    }\n    render() {\n        \n        return (\n            <div>\n                <AbbrTools updater={this.reloadData} getter={this.getData}/>\n                <HotTable settings={this.props.settings}  data={this.props.abbrData}\n                ref={this.tableRef} \n                afterChange={this.handleAbbrChange('afterchange')}\n                afterPaste={this.handleAbbrChange('afterpaste')}\n                afterRemoveRow={this.handleAbbrChange('afterremoverow')}\n                afterUpdateSettings={this.handleAbbrChange('afterupdatesettings')}/>\n            </div>\n        );\n    }\n}\n\nexport default AbbrsViewer;","import React from \"react\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport  {faPlus} from \"@fortawesome/free-solid-svg-icons\"\n\n\n\nclass SynonymViewer extends React.PureComponent{\n    constructor(props){\n        super(props)\n        this.state={\n            synonyms:[],\n            hidden:true,\n        }\n    }\n    getSynonyms = (phrase)=>{\n        const xhttp = new XMLHttpRequest();\n        xhttp.onreadystatechange =  () => {\n            if(xhttp.readyState === 4 && xhttp.status === 200){\n                const dat = JSON.parse(xhttp.responseText);\n               \n                if(dat.length !== 0){\n                    this.setState({\n                        synonyms: dat.map((item)=>{return item.word}),\n                    });\n                }else{\n                    this.setState({\n                        synonyms:[]\n                    })\n                }\n            }\n        }\n        const maxWords=75;\n        xhttp.open(\"GET\",\"https://api.datamuse.com/words?max=\"+ maxWords + \"&ml=\" + phrase, true)\n        xhttp.send();\n    }\n    componentDidMount(){\n        this.getSynonyms(this.props.word);\n    }\n    componentDidUpdate(prevProps){\n        if(prevProps.word !== this.props.word){\n            this.getSynonyms(this.props.word);\n        }\n    }\n\n    render(){\n        const replacedWord = this.props.abbrReplacer(this.props.word);\n        const otherAbbrs = this.props.abbrDict[this.props.word];\n        const header = <Synonym word={this.props.word} key={this.props.word}\n                            abbr={replacedWord===this.props.word ? \"\" : replacedWord} \n                            otherAbbrs={otherAbbrs}/>\n        const synonyms =  <SynonymList onSelReplace={this.props.onSelReplace} key={this.state.synonyms.join('')} synonyms={this.state.synonyms} abbrDict={this.props.abbrDict} abbrReplacer={this.props.abbrReplacer} />;\n        const explanation = <a className=\"panel-block\" key='init'>Auto-thesaurus box - highlight a word or phrase below to show synonyms in this box</a>;\n        const noResults = <a className=\"panel-block\"  key='none'>no results found</a>;\n        let mainBody;\n        if(this.props.word === ''){\n            mainBody = explanation;\n        }else if(this.state.synonyms.length === 0){\n            mainBody = noResults;\n        }else{\n            mainBody = synonyms;\n        }\n        \n        return (\n            <div className=\"card\">\n                <header className=\"card-header has-background-light\tis-shadowless\">\n                    <a className=\"card-header-title\" >\n                        <span style={{marginRight:'5px'}}>Thesaurus{this.props.word===''?'':\":\"}</span>\n                        {header} \n                    </a>\n                    <a className=\"card-header-icon\" onClick={this.props.onHide}>\n                        <span className=\"delete\"> \n                        </span>\n                    </a>\n                </header>\n                <div className=\"card-content\" style={{height:\"275px\", overflow:\"auto\"}} >\n                    \n                    {mainBody}                   \n                    \n                </div>\n            </div>\n        )\n    }\n}\nvar ceil = Math.ceil;\n\nObject.defineProperty(Array.prototype, 'chunk', {value: function(n) {\n    return Array(ceil(this.length/n)).fill().map((_,i) => this.slice(i*n,i*n+n));\n}});\n\nclass SynonymList extends React.PureComponent{\n    constructor(props){\n        super(props);\n    }\n    handleCardClick = (word) => {\n        return (e) => {\n            e.preventDefault();\n            if(document.activeElement === window.getSelection().anchorNode.firstChild){\n                const ta = document.activeElement;\n                this.props.onSelReplace(ta.selectionStart, ta.selectionEnd, word);\n                \n                \n            }\n        }\n    }\n    render(){\n        const words = 75;\n        const cols = 10;\n        const filler = (new Array(cols - words%cols)).join('.').split('.');\n        return (\n            <div>\n                <div className=\"columns is-multiline\">\n                {this.props.synonyms.map((word,i)=>{\n                    const replacedWord = this.props.abbrReplacer(word);\n                    const otherAbbrs = this.props.abbrDict[word];\n                    return (\n                        <div className='card column is-narrow ' key={i}>\n                            <div className='card-content is-paddingless' >\n                                <Synonym word={word} \n                                abbr={replacedWord===word ? \"\" : replacedWord} \n                                otherAbbrs={otherAbbrs}/>\n                                \n                                <a className=\"icon is-small\" onMouseDown={this.handleCardClick(word)}>\n                                    \n                                    <FontAwesomeIcon  icon={faPlus} size=\"xs\" color=\"#51cf66\"/> \n                                </a>\n                               \n\n                            </div>\n                        </div>\n                    )}\n                )}\n                </div>\n            </div>\n        )\n        /*\n        return (\n                <div>\n                    {this.props.synonyms.concat(filler).chunk(cols).map((words,i)=>{          \n                        return (\n                            <div className=\"columns is-multiline\" key={i}>\n                                {words.map((word,j)=>{\n                                    const replacedWord = this.props.abbrReplacer(word);\n                                    const otherAbbrs = this.props.abbrDict[word];\n                                    return (\n                                        <div className='card column is-narrow' key={j}>\n                                            <div className='card-content is-paddingless\t'>\n                                                <Synonym word={word} \n                                                abbr={replacedWord===word ? \"\" : replacedWord} \n                                                otherAbbrs={otherAbbrs}/>\n                                            </div>\n                                        </div>\n                                        \n                                    )}\n                                )}\n                            </div> \n                        )}\n                    )}\n                </div>\n        );\n        */\n    }\n}\nclass Synonym extends React.PureComponent{\n    render(){\n        //don't forget! you need to add capability to check on disabled abbreviations\n        let mainAbbrDisp = '';\n        if(this.props.abbr){\n            mainAbbrDisp = <span style={{fontWeight: \"bold\"}}> \n                            {\" (\" + this.props.abbr + \")\"}\n                        </span>;\n        }\n        \n        let enabledAbbrDisp = ''\n        let disabledAbbrDisp = ''\n\n        if(this.props.otherAbbrs){\n            if(this.props.otherAbbrs.enabled){\n                let enabledAbbrs = this.props.otherAbbrs.enabled.filter((abbr)=>{\n                    return abbr!==this.props.abbr;\n                });\n                if(enabledAbbrs.length>0){\n                    enabledAbbrDisp = <span style={{fontStyle:\"italic\"}}>\n                                        {\" (\" + enabledAbbrs.join(',') + \")\"}\n                                    </span>\n                }\n            }\n            \n            if(this.props.otherAbbrs.disabled){\n                let disabledAbbrs = this.props.otherAbbrs.disabled;\n                if(disabledAbbrs.length>0){\n                    disabledAbbrDisp = <span style={{fontStyle:\"italic\"}}>\n                                            {\" (\" + disabledAbbrs.join(',') + \")\"}\n                                        </span>\n                }\n            }\n        }\n        return(\n            <span>\n                <span>{this.props.word}</span>\n                {mainAbbrDisp}\n                {enabledAbbrDisp}\n                {disabledAbbrDisp}\n            </span>\n        )\n    }\n}\nexport default SynonymViewer;","import React from \"react\"\nimport {Bullet, BulletComparator} from \"./bullets.js\"\nimport {Logo,DocumentTools}  from \"./tools.js\"\nimport AbbrsViewer from \"./abbrs.js\"\nimport SynonymViewer from \"./thesaurus.js\"\n // booleans for debugging\n\n\nclass BulletApp extends React.Component {\n    constructor(props){\n        super(props);\n        if(this.props.savedSettings){\n            //enableOptim, text, and width should be in settings\n            this.state = BulletApp.ParseSettings(this.props.savedSettings);\n        }else{\n            this.state={\n                enableOptim: true,\n                text: this.props.initialText,\n                width: this.props.initialWidth,\n                abbrData: this.props.abbrData,\n            }\n        }\n        \n        this.state.abbrDict = {};\n        this.state.textSelRange = {start: 0, end:0}\n        this.state.selection = '';\n        this.state.currentTab = 0;\n        this.abbrsViewerRef = React.createRef();\n        this.state.showThesaurus = false;\n\n    }\n    static ParseSettings = (settingsAll) => {\n        const settings = settingsAll[0];\n        \n        const state={\n            enableOptim: settings.enableOptim,\n            text: settings.text,\n            width: settings.width,\n            abbrData: settings.abbrData.map((row)=>{\n                return {\n                    enabled: row[0],\n                    value: row[1], \n                    abbr: row[2],\n                };\n            }),\n        };\n        return state;\n    }\n    handleJSONImport = (settings)=>{\n\n        this.setState({text:settings.text});\n        this.setState((state)=>{\n            state.enableOptim = settings.enableOptim;\n            state.width = settings.width;\n            state.abbrData= settings.abbrData;\n            return state;\n        },);\n        // some sort of race condition happens if I try to set text and other settings at the same time!\n\n    }\n    handleAbbrChange = (tableRef)=>{\n\n        //this handles the very first abbreviation replacement when the page is first opened. not prettu but it works.\n        if(tableRef.current == null ){this.setState({\n            abbrDict: this.createAbbrDict(this.state.abbrData),\n        })\n        return;\n        }\n        const abbrTable = tableRef.current.hotInstance;\n        const newAbbrDict = {};\n        \n        for (let i = 0; i < abbrTable.countRows();i++){\n            let fullWord = String(abbrTable.getDataAtRowProp(i,'value')).replace(/\\s/g,' ');\n            let abbr = abbrTable.getDataAtRowProp(i,'abbr');\n            //console.log('abbr: ' + abbr)\n            let enabled = abbrTable.getDataAtRowProp(i,'enabled')\n            newAbbrDict[fullWord] = newAbbrDict[fullWord] || [];\n            \n            if(enabled){\n                newAbbrDict[fullWord].enabled = newAbbrDict[fullWord].enabled || [];\n                newAbbrDict[fullWord].enabled.push(abbr)\n            }else{\n                newAbbrDict[fullWord].disabled = newAbbrDict[fullWord].disabled || [];\n                newAbbrDict[fullWord].disabled.push(abbr)\n            }\n        }\n        this.setState({\n            abbrDict: newAbbrDict,\n        })\n\n        \n    }\n    createAbbrDict = (abbrData)=>{\n\n        const abbrDict = {};\n        abbrData.map((row)=>{\n            let fullWord = String(row.value).replace(/\\s/g,' ');\n            let abbr = row.abbr;\n            let enabled = row.enabled;\n            abbrDict[fullWord] = abbrDict[fullWord] || []; //initializes to empty array if necessary\n\n            if(enabled){\n                abbrDict[fullWord].enabled = abbrDict[fullWord].enabled || [];\n                abbrDict[fullWord].enabled.push(abbr)\n            }else{\n                abbrDict[fullWord].disabled = abbrDict[fullWord].disabled || [];\n                abbrDict[fullWord].disabled.push(abbr)\n            }\n        })\n\n        return abbrDict;\n\n    }\n    createAbbrReplacer = (abbrDict) => {\n        return (sentence) => {\n            const finalAbbrDict = {};\n            Object.keys(abbrDict).map(\n                (word)=>{\n                    const abbrs = abbrDict[word]; //an array\n                    //if there is at least one enabled abbreviation, take the lowest most element of it.\n                    if(abbrs.enabled) {\n                        finalAbbrDict[word] = abbrs.enabled[abbrs.enabled.length-1]\n                    }\n                }\n            )\n            let modifiers = 'g'\n            const regExp = new RegExp(\"(\\\\b)(\"+Object.keys(finalAbbrDict).join(\"|\")+\")(\\\\b|$|\\\\$)\", modifiers);\n            const newSentence = sentence.replace(regExp, \n                (match,p1,p2,p3) => {\n                    //p2 = p2.replace(/ /g,'\\\\s')\n                    let abbr = finalAbbrDict[p2];\n                    if(!abbr){\n                        abbr = '';\n                    }\n                    return p1 + abbr +  p3;\n                }\n            );\n\n            \n            return newSentence;\n        }\n    }\n    handleOptimChange = () =>{\n        this.setState((state)=>{\n            return {enableOptim: !state.enableOptim};\n        });\n    }\n    handleSelect = (newSel)=>{\n        \n        const maxWords = 8;\n        if(newSel.trim() !== ''){\n            \n            this.setState({\n                selection: Bullet.Tokenize(newSel.trim()).slice(0,maxWords).join(' ')\n            });\n        }\n\n    }\n    handleTextChange = (e) => {\n        this.setState({\n            text: e.target.value,\n        });\n    }\n    handleWidthChange = (e) => {\n        this.setState({\n            width: e.target.value + 'mm',\n        });\n    }\n    handleTextNorm = () => {\n        this.setState((state) => {\n            state.text = state.text.split('\\n').map((line)=>{\n                return line.replace(/\\s+/g,' ')\n            }).join('\\n');\n            return state\n        });\n    }\n    handleTextUpdate = (newText)=>{\n        return () => this.setState({\n            text: newText,\n        });\n    }\n    handleWidthUpdate = (newWidth) =>{\n        return () => {\n            this.setState({width: newWidth})\n        };\n    } \n    handleSave = () =>{\n\n        return {\n            width: this.state.width,\n            text: this.state.text,\n            abbrData: this.abbrsViewerRef.current.getData().filter((row)=>{\n                return row[0] !== null\n            }),\n            enableOptim:this.state.enableOptim,\n            //do I need to add abbrReplacer?\n        }\n    }\n    handleTabChange = (newTab)=>{\n        return ()=>{\n            this.setState({currentTab: newTab})\n        };\n    }\n    handleThesaurusHide = () => {\n        const oldState = this.state.showThesaurus;\n        this.setState({showThesaurus: !oldState});\n    }\n    handleSelReplace = (start,end, word) => {\n        const oldText = this.state.text;\n        const beforeText = oldText.substring(0,start);\n        const replacedText = oldText.substring(start,end);\n        const match = replacedText.match(/^(\\s*).*?(\\s*)$/);\n        const beforeSpaces = match[1];\n        const afterSpaces = match[2];\n        let newWord\n        if(replacedText.match(/^\\s*[A-Z]/)){\n            newWord = word.split(/\\s/).map((subword)=>{return subword[0].toUpperCase() + subword.slice(1)}).join(' ')\n        }else{ newWord = word }\n        \n        const afterText = oldText.substring(end);\n        console.log(beforeText+beforeSpaces, beforeText+beforeSpaces+newWord)\n        console.log((beforeText+beforeSpaces).length, (beforeText+beforeSpaces+newWord).length)\n        this.setState({\n            text: beforeText+beforeSpaces+newWord+afterSpaces+afterText,\n            textSelRange:  {trigger: Math.random(), start: (beforeText+beforeSpaces).length, end: (beforeText+beforeSpaces+newWord).length}\n        })\n        \n    }\n    handleCaseChange = () => {\n        this.setState((state)=>{\n            state.enableCase = !state.enableCase;\n            return state;\n        })\n    }\n    render(){\n        const tabs = ['Bullets', 'Abbreviations'];\n        const abbrReplacer = this.createAbbrReplacer(this.state.abbrDict);\n        return (\n            <div className=\"container is-fluid\">\n                <div className='columns is-multiline'>\n                    <div className='column is-full'>\n                        <Logo />\n                        <DocumentTools \n                            enableOptim={this.state.enableOptim}\n                            onOptimChange={this.handleOptimChange} \n                            width={this.state.width} onWidthChange={this.handleWidthChange} \n                            onWidthUpdate={this.handleWidthUpdate}\n                            onTextNorm={this.handleTextNorm}\n                            onTextUpdate={this.handleTextUpdate}\n                            onSave={this.handleSave}\n                            onJSONImport={this.handleJSONImport}\n                            onThesaurusHide={this.handleThesaurusHide}\n                            />\n                    </div>\n                \n                    <div className={'column is-full' + ' ' + (this.state.showThesaurus? \"\":\"is-hidden\")}>\n                        <SynonymViewer word={this.state.selection} onSelReplace={this.handleSelReplace} abbrDict={this.state.abbrDict} abbrReplacer={abbrReplacer} \n                            onHide={this.handleThesaurusHide}/>\n                    </div>\n                    <div className=\"column is-full\">\n                        <div className=\"tabs\">\n                            <ul>\n                                {tabs.map((tab,i)=>{\n                                    return (\n                                        <li key={i} className={this.state.currentTab === i?\"is-active\":''} ><a onClick={this.handleTabChange(i)}>{tab}</a></li>\n                                    )}\n                                )}\n                            </ul>\n                        </div>\n                    </div>\n                    {this.state.currentTab===0? (\n                    <div className='column is-full'>\n                        <BulletComparator text={this.state.text} textSelRange={this.state.textSelRange}\n                            abbrReplacer={abbrReplacer} handleTextChange={this.handleTextChange}\n                            width={this.state.enableOptim? (parseFloat(this.state.width.replace(/[a-zA-Z]/g,''))-0.00)+'mm':this.state.width} \n                            onSelect={this.handleSelect} enableOptim={this.state.enableOptim} />\n                    </div> ) : '' }\n                    <div className={'column is-full' + ' ' + (this.state.currentTab !== 1?'is-invisible':'')}>\n                        <AbbrsViewer settings={this.props.tableSettings} \n                        abbrData={this.state.abbrData} \n                        onAbbrChange={this.handleAbbrChange} ref={this.abbrsViewerRef} />\n                    </div>\n                </div>    \n            </div>\n        );\n    }\n}\n\nexport default BulletApp;\n\n/*\n// implementing fontReady as a promise (instead of using document.fonts.ready) to make it Edge compatible\nconst fontReady = new Promise(function(resolve,rej){\n    WebFont.load({\n        custom: {\n            families: ['AdobeTimes']\n        }\n    });\n    resolve();\n});\n\n/*\nfontReady.then( ()=>{\n    ReactDOM.render( , document.getElementById('stuff'));\n});\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport BulletApp from \"./components/main.js\"\n\nimport \"./styles/index.scss\"\nimport 'handsontable/dist/handsontable.full.css'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst initialText = '- This is a custom built bullet writing tool; abbreviations will be replaced according to table in the abbreviations tab--you will see output on the right\\n\\\n- This tool can optimize spacing; output will be red if the optimizer could not fix spacing with 2004 or 2006 Unicode spaces\\n\\\n- Click the thesaurus button to show one; select a word in this or the output box to view synonyms--words in parentheses are abbreviations that are configured';\n\nconst tableData = [{\n  enabled: true,\n  value: 'abbreviations',\n  abbr: 'abbrs',\n}, {\n  enabled: true,\n  value: 'table',\n  abbr: 'tbl',\n}, {\n  enabled: true,\n  value: 'optimize',\n  abbr: 'optim',\n}, {\n  enabled: true,\n  value: 'with ',\n  abbr: 'w/',\n}, {\n  enabled: true,\n  value: 'parentheses',\n  abbr: 'parens',\n},\n];\n\nString.prototype.hashCode = function () {\n  let hash = 0, i, chr;\n  if (this.length === 0) return hash;\n  for (i = 0; i < this.length; i++) {\n    chr = this.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n};\n\nconst tableSettings = {\n  columns: [{\n    data: 'enabled',\n    type: 'checkbox',\n    disableVisualSelection: true,\n    width: 20\n  }, {\n    data: 'value',\n    type: 'text'\n  }, {\n    data: 'abbr',\n    type: 'text'\n  },\n  ],\n  stretchH: 'all',\n  width: 500,\n  autoWrapRow: true,\n  height: 500,\n  maxRows: Infinity,\n  manualRowResize: true,\n  manualColumnResize: true,\n  rowHeaders: true,\n  colHeaders: [\n    'Enabled',\n    'Word',\n    'Abbreviation',\n  ],\n  trimWhitespace: false,\n  enterBeginsEditing: false,\n  manualRowMove: true,\n  manualColumnMove: true,\n  columnSorting: {\n    indicator: true\n  },\n  autoColumnSize: false,\n  minRows: 15,\n  contextMenu: true,\n  licenseKey: 'non-commercial-and-evaluation',\n  search: {\n    queryMethod: function (queryStr, value) {\n      return queryStr.toString() === value.toString();\n    },\n    callback: function (instance, row, col, value, result) {\n      const DEFAULT_CALLBACK = function (instance, row, col, data, testResult) {\n        instance.getCellMeta(row, col).isSearchResult = testResult;\n      };\n\n      DEFAULT_CALLBACK.apply(this, arguments);\n    },\n  },\n};\n\nlet settings;\ntry {\n\n  if (localStorage.getItem('bullet-settings')) {\n    settings = JSON.parse(localStorage.getItem(\"bullet-settings\"));\n\n\n  }\n} catch (err) {\n  if (err.name === 'SecurityError') {\n    console.log('Was not able to get localstorage bullets due to use of file interface and browser privacy settings');\n  } else {\n    throw err;\n  }\n}\n\nReactDOM.render(\n  <>\n    <div className=\"section\" id=\"stuff\" >\n      <BulletApp savedSettings={settings} tableSettings={tableSettings} abbrData={tableData} initialText={initialText} initialWidth={\"202.321mm\"} />\n    </div>\n    <div className=\"container\" id=\"footer\">\n      <div>If you have feedback, submit\n          an <a href='https://github.com/EA-Pods-Team/pdf-bullets/issues'>issue</a>\n          or a <a href=\"https://github.com/EA-Pods-Team/pdf-bullets/pulls\">pull request</a>\n      </div>\n      <div>This site utilizes PDF.JS (pdf import), HandsOnTable (spreadsheet), the DataMuse API (thesaurus), and Bulma (CSS).</div>\n      <div>Maintained by Christopher Kodama </div>\n    </div>\n  </>\n, document.getElementById('root'));\n\n/*\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}